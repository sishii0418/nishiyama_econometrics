[["index.html", "西山ほか (2019)『計量経済学』有斐閣の練習問題解答とRでの再現 はじめに 方針 似たようなサイト", " 西山ほか (2019)『計量経済学』有斐閣の練習問題解答とRでの再現 石井 俊輔 2025-02-12 はじめに 西山ほか (2019)『計量経済学』有斐閣 (出版社リンク) の練習問題解答とRでの再現です. 必要なRパッケージをインストール: install.packages(&quot;tidyverse&quot;) install.packages(&quot;haven&quot;) install.packages(&quot;wooldridge&quot;) install.packages(&quot;fixest&quot;) install.packages(&quot;car&quot;) install.packages(&quot;knitr&quot;) install.packages(&quot;modelsummary&quot;) install.packages(&quot;estimatr&quot;) install.packages(&quot;AER&quot;) install.packages(&quot;marginaleffects&quot;) install.packages(&quot;pscl&quot;) install.packages(&quot;nnet&quot;) install.packages(&quot;sampleSelection&quot;) install.packages(&quot;patchwork&quot;) install.packages(&quot;latex2exp&quot;) install.packages(&quot;kableExtra&quot;) install.packages(&quot;estatapi&quot;) install.packages(&quot;tidyquant&quot;) install.packages(&quot;dynlm&quot;) install.packages(&quot;fGarch&quot;) 方針 不均一分散に頑健な回帰分析はestimatr::lm_robust()を使っています. 固定効果モデル(第6章)はestimatr::lm_robust()に加え処理が高速とされるfixest::feols()を併用し比較検討しています. 回帰結果の表はmodelsummary, その他の表はgtなどを使い, 容易にHTML, \\(\\rm\\LaTeX\\)間で変換ができるようにしています (レポートなどでの利用を想定). tidyverseを使い, 図はggplot2で出力しています. 似たようなサイト 公式の解答はないようですが, ほかに似たようなサイトとして以下があります (ほかにもご存知でしたらご教授ください). 北川梨津 (2020) 『西山 他『計量経済学』のためのR』(https://ritsu1997.github.io/r-for-nlas-econometrics/)1. @kpd0605(ビル・エヴァンス ギャンビット) (2024) 『『計量経済学』（有斐閣）実践問題解答例（順次追加）』(https://qiita.com/kpd0605/items/28ca24fe8b192612e67c). 勝手ながら, だいぶ参考にさせていただきました.↩︎ "],["ch2.html", "第2章 データの整理と確率変数の基礎 練習問題 2-1 [確認] 練習問題 2-2 [確認] 練習問題 2-3 [確認] 練習問題 2-4 [確認] 練習問題 2-5 [確認]", " 第2章 データの整理と確率変数の基礎 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support02.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support02.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support02.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) ## ── Attaching core tidyverse packages ────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ──────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors 練習問題 2-1 [確認] R には最頻値を求める関数がないようなので, 別途関数Mode()を定義する. data21 &lt;- read.table(&quot;data/02_第2章/02_practice_01.csv&quot;) mean(data21$V1) ## [1] 10 var(data21$V1) ## [1] 18.10526 median(data21$V1) ## [1] 10 Mode &lt;- function(x) { ux &lt;- unique(x) tab &lt;- tabulate(match(x, ux)) ux[tab == max(tab)] } Mode(data21$V1) ## [1] 10 練習問題 2-2 [確認] 与式1行目については \\[ \\begin{aligned} LHS_1 &amp;= \\frac{1}{N}\\sum_{i=1}^N (x_i-\\bar{x})^2 = \\frac{1}{N}\\sum_{i=1}^N (x_i^2 - 2x_i\\bar{x}+\\bar{x}^2) \\\\ &amp;= \\frac{1}{N}\\left[\\sum_{i=1}^N (x_i^2-x_i\\bar{x})-\\left(\\bar{x}\\sum_{i=1}^N x_i-N\\bar{x}^2\\right)\\right] \\\\ &amp;= \\frac{1}{N}\\left[\\sum_{i=1}^N (x_i^2-x_i\\bar{x})-\\left(\\bar{x}\\cdot N\\bar{x}-N\\bar{x}^2\\right)\\right] \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N (x_i^2-x_i\\bar{x}) = \\frac{1}{N}\\sum_{i=1}^N (x_i-\\bar{x})x_i = MHS \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N x_i^2 - \\frac{1}{N}\\bar{x}\\sum_{i=1}^N x_i \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N x_i^2 - \\frac{1}{N}\\bar{x}\\cdot N\\bar{x} \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N x_i^2 - \\bar{x}^2 = RHS_1. \\end{aligned} \\] 与式2, 3行目については \\[ \\begin{aligned} LHS_2 &amp;= \\frac{1}{N}\\sum_{i=1}^N (x_i-\\bar{x})(y_i - \\bar{y}) = \\frac{1}{N}\\sum_{i=1}^N (x_iy_i - x_i\\bar{y} - \\bar{x}y_i + \\bar{x}\\bar{y}) \\\\ &amp;= \\frac{1}{N}\\left[\\sum_{i=1}^N (x_iy_i - \\bar{x}y_i) - \\sum_{i=1}^N (x_i\\bar{y} - \\bar{x}\\bar{y})\\right] \\\\ &amp;= \\frac{1}{N}\\left[\\sum_{i=1}^N (x_iy_i - \\bar{x}y_i) - (N\\bar{x}\\bar{y} - N\\bar{x}{y})\\right] \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N (x_i-\\bar{x})y_i = MHS_2 \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N (x_iy_i) - \\frac{1}{N}\\bar{x}\\sum_{i=1}^N y_i \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N x_iy_i - \\frac{1}{N}\\bar{x}\\cdot N\\bar{y} \\\\ &amp;= \\frac{1}{N}\\sum_{i=1}^N x_iy_i - \\bar{x}\\bar{y} = RHS_3. \\end{aligned} \\] \\(MHS_2 = RHS_2\\)は\\(LHS_2 = MHS_2\\)と\\(x\\)と\\(y\\)との対称性から求められるので, 省略. QED 練習問題 2-3 [確認] data23 &lt;- read.table(&quot;data/02_第2章/02_practice_03.csv&quot;, sep=&quot;,&quot;) x &lt;- data23$V1 y &lt;- data23$V2 data23 %&gt;% ggplot(aes(x = x, y = y)) + geom_point() cov(x, y) ## [1] 2.111111 cor(x, y) ## [1] 0.7680295 練習問題 2-4 [確認] 任意の\\(t\\)に対して \\[ \\begin{aligned} \\Var(tX+Y) &amp;= t^2\\Var(X) + 2t\\Cov(X, Y) + \\Var(Y) \\\\ &amp;= s_x^2t^2 + 2s_{xy}t + s_y^2 \\geq 0 \\end{aligned} \\] だから, これを\\(t\\)に関する2次関数と見ると, 判別式は \\[ D = s_{xy}^2 - s_x^2s_y^2 \\leq 0 \\] を満たす. これより, \\(0 \\leq s_{xy}^2 \\leq s_x^2s_y^2\\)であるから, \\[ |s_{xy}| \\leq s_xs_y. \\] よって, \\[ \\frac{|s_{xy}|}{s_xs_y} = \\left|\\frac{s_{xy}}{s_xs_y}\\right| = |r_{xy}| \\leq 1 \\] i.e., \\(-1 \\leq r_{xy} \\leq 1\\). QED 別解 2つのベクトル\\(\\mathbb{x} = (x_1, \\cdots, x_n), \\mathbb{y} = (y_1, \\cdots, y_n)\\)を考える. それぞれの値を平均値で引いたものを \\(\\mathbb{x}_c = (x_1 - \\bar{x}, \\cdots, x_n - \\bar{x}), \\mathbb{y}_c = (y_1 - \\bar{y}, \\cdots, y_n - \\bar{y})\\)とすると, 相関係数\\(r_{xy}\\)は \\[ \\begin{aligned} r_{xy} &amp;= \\frac{s_{xy}}{s_xs_y} \\\\ &amp;= \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^n (x_i - \\bar{x})^2}\\sqrt{\\sum_{i=1}^n (y_i - \\bar{y})^2}} \\\\ &amp;= \\frac{\\mathbb{x}_c\\cdot\\mathbb{y}_c}{|\\mathbb{x}_c||\\mathbb{y}_c|} \\\\ &amp;= \\cos\\theta &amp; \\text{ただし, $\\theta$は$\\mathbb{x}_c$と$\\mathbb{y}_c$のなす角} \\end{aligned} \\] と表せるから, \\(-1 \\leq \\cos\\theta = r_{xy} \\leq 1\\)である. QED 練習問題 2-5 [確認] それぞれ \\[ \\begin{aligned} \\E(X) &amp;= \\sum_x x\\P(X=x) = 1\\cdot\\frac{1}{5} + 5\\cdot\\frac{1}{4} + 6\\cdot\\frac{3}{10} + 7\\cdot\\frac{1}{4} = 5. \\\\ \\E(X^2) &amp;= \\sum_x x^2\\P(X=x) = 1^2\\cdot\\frac{1}{5} + 5^2\\cdot\\frac{1}{4} + 6^2\\cdot\\frac{3}{10} + 7^2\\cdot\\frac{1}{4} = 29.5. \\\\ \\Var(X) &amp;= \\E(X^2) - [\\E(X)]^2 = 4.5. \\end{aligned} \\] 累積分布関数はggplot2::stat_ecdf()を用いて描画できる. データは先に指定された確率通りに生成しておく. data &lt;- tibble(x = c(rep (1, 8), rep(5, 10), rep(6, 12), rep(7, 10))) data %&gt;% ggplot(aes(x = x)) + stat_ecdf() "],["ch3.html", "第3章 統計理論の基礎 練習問題 3-2 [確認]", " 第3章 統計理論の基礎 第3章では第2章と同じデータを使うため、新たなダウンロードは不要. なお出版社サイトにある第3章のファイルは, 練習問題2-1のデータを用いるところが, 誤って練習問題2-3と同じデータが格納されている. 必要なライブラリを読み込む. library(tidyverse) 練習問題 3-2 [確認] 第2章練習問題2-1で用いたデータを読み込み、両側t検定を実行する. \\(\\alpha=0.10\\)の場合90%信頼区間は\\([8.354811, 11.645189]\\)となり, これは8を含まないことから帰無仮説は棄却できる. 一方で\\(\\alpha=0.01\\)のとき、99%信頼区間は\\([7.277955, 12.722045]\\)となり8を含むことから, 帰無仮説は棄却されない. data32 &lt;- read.csv(&quot;data/02_第2章/02_practice_01.csv&quot;, header = FALSE) x &lt;- data32$V1 t.test(x, alternative = &quot;two.sided&quot;, mu = 8, conf.level = 0.90) ## ## One Sample t-test ## ## data: x ## t = 2.102, df = 19, p-value = 0.04911 ## alternative hypothesis: true mean is not equal to 8 ## 90 percent confidence interval: ## 8.354811 11.645189 ## sample estimates: ## mean of x ## 10 t.test(x, alternative = &quot;two.sided&quot;, mu = 8, conf.level = 0.99) ## ## One Sample t-test ## ## data: x ## t = 2.102, df = 19, p-value = 0.04911 ## alternative hypothesis: true mean is not equal to 8 ## 99 percent confidence interval: ## 7.277955 12.722045 ## sample estimates: ## mean of x ## 10 "],["ch4.html", "第4章 線形単回帰モデルの推定と検定 実証例4.1 労働生産性と実質賃金の関係 図4-1 時間当たり実質賃金と労働生産性 練習問題 4-2 [実証] 練習問題 4-10 [実証]", " 第4章 線形単回帰モデルの推定と検定 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support04.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support04.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support04.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(readxl) library(estimatr) 実証例4.1 労働生産性と実質賃金の関係 p.128の実証例ブロック内の\\(N=22\\)は\\(N=21\\)の誤植と思われる. ch04_wage &lt;- read.csv(&quot;data/04_第4章/ch04_wage.csv&quot;) ch04_wage_model &lt;- lm(wage ~ productivity, data = ch04_wage) summary(ch04_wage_model) ## ## Call: ## lm(formula = wage ~ productivity, data = ch04_wage) ## ## Residuals: ## Min 1Q Median 3Q Max ## -47.618 -17.612 4.186 21.946 37.052 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 276.12961 87.61057 3.152 0.00525 ** ## productivity 0.54682 0.02442 22.395 4.04e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25.77 on 19 degrees of freedom ## Multiple R-squared: 0.9635, Adjusted R-squared: 0.9616 ## F-statistic: 501.5 on 1 and 19 DF, p-value: 4.037e-15 Rのlm()で計算される標準誤差は不均一分散に対して頑健でない. 本文中にある不均一分散に対して頑健な計算結果を求めるには, estimatr::lm_robust()を用い, se_type = \"stata\"と指定する. ch04_wage_model_robust &lt;- lm_robust(wage ~ productivity, data = ch04_wage, se_type = &quot;stata&quot;) summary(ch04_wage_model_robust) ## ## Call: ## lm_robust(formula = wage ~ productivity, data = ch04_wage, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 276.1296 71.25559 3.875 1.019e-03 126.990 425.2693 19 ## productivity 0.5468 0.02046 26.722 1.553e-16 0.504 0.5896 19 ## ## Multiple R-squared: 0.9635 , Adjusted R-squared: 0.9616 ## F-statistic: 714.1 on 1 and 19 DF, p-value: &lt; 2.2e-16 図4-1 時間当たり実質賃金と労働生産性 回帰曲線はgeom_smooth()で描画できる. ch04_wage %&gt;% ggplot(aes(x = productivity, y = wage)) + geom_point() + xlab(&quot;労働生産性 (円)&quot;) + ylab(&quot;実質賃金 (円)&quot;) + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;black&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; 練習問題 4-2 [実証] データを読み込み, 回帰分析を実行する. Excelファイルの読み込みにはreadxl::read_excel()を用いる. このパッケージはtidyverseに付帯しているが, 別途読み込む必要がある. 列名が日本語だと扱いづらいため, これを変更しておく. \\(gdp2013\\_ln = \\beta_0 + \\beta_1 pop2013\\_ln\\)というモデルを立てると, \\(\\hat{\\beta_0} = 7.623, \\hat{\\beta_1} = 1.075\\)と求められる. data42 &lt;- read_excel(&quot;data/04_第4章/data for chap 4 exercise 2.xlsx&quot;) colnames(data42) &lt;- c(&quot;pref&quot;, &quot;pop2013&quot;, &quot;gdp2013&quot;, &quot;pop2013_ln&quot;, &quot;gdp2013_ln&quot;) model42 &lt;- lm(gdp2013_ln ~ pop2013_ln, data = data42) model42 ## ## Call: ## lm(formula = gdp2013_ln ~ pop2013_ln, data = data42) ## ## Coefficients: ## (Intercept) pop2013_ln ## 7.623 1.075 帰無仮説\\(H_0\\): \\(\\beta_1 = 1\\)に関して, 統計量\\(t = \\frac{\\hat{\\beta_1} - \\beta_1}{\\text{SE}(\\hat{\\beta_1})} = 2.62773\\)が求められる. これは自由度\\(n-2 = 45\\)で, 有意水準5%のt検定の棄却域\\((\\infty, -2.014103]\\), \\([2.014103, \\infty)\\)に入っていることから帰無仮説は棄却される. beta1 &lt;- model42$coefficients[2] sebeta1 &lt;- summary(model42)$coefficients[2, 2] n &lt;- dim(data42)[1] t &lt;- (beta1 - 1)/sebeta1 t ## pop2013_ln ## 2.62773 qt(0.975, n-2) # 2.014103 ## [1] 2.014103 confint()関数を用いると直接求められる. confint(model42, &#39;(Intercept)&#39;, level=0.90) ## 5 % 95 % ## (Intercept) 7.257252 7.988132 人口が1%変化すると, GDPは\\(\\beta_1 = 1.075\\)%変化する. \\(\\text{Var}(u) = \\frac{\\sum_{i=1}^n \\hat{u}_i^2}{n-2} = 0.02245859\\)と求められる. ln(人口)の分散はvar()関数を用いると, 0.5964525と求められる. sum(model42$residuals^2)/(n-2) ## [1] 0.02245859 var_pop2013_ln &lt;- var(data42$pop2013_ln) var_pop2013_ln ## [1] 0.5964525 練習問題 4-10 [実証] データを読み込み, 回帰分析を実行することで\\(\\beta_1\\)を一致推定できるか調べる. 実際に計算すると, Cov\\((u_i, X_i) = 0\\)が成り立っていることが確認できる. data410 &lt;- read_excel(&quot;data/04_第4章/data for chap 4 exercise 10.xlsx&quot;) %&gt;% data.frame() model410 &lt;- lm(Y ~ X, data = data410) cov(model410$residuals, data410$X) ## [1] 3.643979e-17 E\\((u_i^2|X_i) = 0.690318 \\neq 0\\). 散布図を描くと, \\(\\hat{Y}_i\\)が大きくなるに従って残差の分散が大きくなっていることが確認できる. mean(model410$residuals^2) ## [1] 0.690318 model410 %&gt;% ggplot(aes(x = .fitted, y = .resid)) + geom_point() + geom_hline(yintercept = 0) 不均一分散に頑健な標準誤差はestimatr::lm_robust()を用いて求める. model410_robust &lt;- lm_robust(Y ~ X, data = data410) summary(model410_robust) ## ## Call: ## lm_robust(formula = Y ~ X, data = data410) ## ## Standard error type: HC2 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.8103 0.1583 5.119 4.803e-07 0.4991 1.122 398 ## X 1.2773 0.2158 5.918 7.035e-09 0.8530 1.702 398 ## ## Multiple R-squared: 0.05683 , Adjusted R-squared: 0.05446 ## F-statistic: 35.02 on 1 and 398 DF, p-value: 7.035e-09 summary()によると, \\(\\beta_1\\)の95%信頼区間に0.8は入っていないため, 帰無仮説は棄却されない. 不均一分散に頑健な標準誤差はestimatr::lm_robust()を用いて求める. confint(model410) ## 2.5 % 97.5 % ## (Intercept) 0.3912772 1.229412 ## X 0.7645056 1.790022 summary()によると, \\(\\beta_1\\)の95%信頼区間に0.8は入っており, 帰無仮説は棄却される. 分散が均一でないデータに均一分散を仮定した標準誤差を用いると, 上のように異なる結果が導かれることがある. "],["ch5.html", "第5章 重回帰モデルの推定と検定 単回帰 (5.1), (5.2) 実証例5.1 信頼と規範が経済成長に与える影響の重回帰分析 実証例5.2 FWL定理の確認 実証例5.3 FWL定理の別表現の確認 実証例5.4 信頼と規範が経済成長に与える影響の重回帰分析の標準誤差 実証例5.5 信頼と規範が経済成長に与える影響の多項式モデル 図5-1 散布図と推定された回帰曲線 例題5.5 実証例5.6 都市化の度合いと初期時点GDPの交互作用 実証例5.7 都市化の度合いと初期時点GDPのダミー変数同士の交互作用 実証例5.8 非線形モデルにおける結合仮説の検定 実証例5.9 ポンフェローニ検定 表5-5 記述統計量 表5-6 推定結果: 被説明変数は経済成長率 表5-7 推定結果 練習問題 5-14 [実証] 練習問題 5-15 [実証]", " 第5章 重回帰モデルの推定と検定 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support05.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support05.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support05.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(estimatr) library(knitr) library(modelsummary) ## `modelsummary` 2.0.0 now uses `tinytable` as its default table-drawing ## backend. Learn more at: https://vincentarelbundock.github.io/tinytable/ ## ## Revert to `kableExtra` for one session: ## ## options(modelsummary_factory_default = &#39;kableExtra&#39;) ## options(modelsummary_factory_latex = &#39;kableExtra&#39;) ## options(modelsummary_factory_html = &#39;kableExtra&#39;) ## ## Silence this message forever: ## ## config_modelsummary(startup_message = FALSE) library(gt) library(car) ## Loading required package: carData ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode ## The following object is masked from &#39;package:purrr&#39;: ## ## some library(wooldridge) library(haven) library(kableExtra) ## ## Attaching package: &#39;kableExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## group_rows 単回帰 (5.1), (5.2) 先にデータを読み込み, 変数を作成する. youdou &lt;- read.csv(&quot;data/05_第5章/youdou.csv&quot;) youdou &lt;- youdou %&gt;% mutate(lny80 = log(y80)) %&gt;% mutate(lny99 = log(y99)) %&gt;% mutate(lny90 = log(y90)) %&gt;% mutate(growthrate8099 = (lny99-lny80)/19*100) %&gt;% mutate(growthrate8090 = (lny90-lny80)/10) 不均一分散に頑健な標準誤差を求めるために, estimatr::lm_robust()を使う. youdou_51 &lt;- lm_robust(growthrate8099 ~ trust80, data = youdou, se_type = &quot;stata&quot;) summary(youdou_51) ## ## Call: ## lm_robust(formula = growthrate8099 ~ trust80, data = youdou, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 3.1394 0.06044 51.943 8.188e-42 3.01763 3.2611 45 ## trust80 0.2247 0.06640 3.384 1.491e-03 0.09094 0.3584 45 ## ## Multiple R-squared: 0.179 , Adjusted R-squared: 0.1608 ## F-statistic: 11.45 on 1 and 45 DF, p-value: 0.001491 youdou_52 &lt;- lm_robust(growthrate8099 ~ norm80, data = youdou, se_type = &quot;stata&quot;) summary(youdou_52) ## ## Call: ## lm_robust(formula = growthrate8099 ~ norm80, data = youdou, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 3.0905 0.04826 64.033 7.544e-46 2.9933 3.1878 45 ## norm80 0.5597 0.07058 7.931 4.348e-10 0.4176 0.7019 45 ## ## Multiple R-squared: 0.4563 , Adjusted R-squared: 0.4442 ## F-statistic: 62.9 on 1 and 45 DF, p-value: 4.348e-10 実証例5.1 信頼と規範が経済成長に与える影響の重回帰分析 youdou_55 &lt;- lm_robust(growthrate8099 ~ trust80 + education80 + lny80, data = youdou, se_type = &quot;stata&quot;) summary(youdou_55) ## ## Call: ## lm_robust(formula = growthrate8099 ~ trust80 + education80 + ## lny80, data = youdou, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.04885 0.42643 14.1849 8.041e-18 5.189 6.9088 43 ## trust80 0.02058 0.07564 0.2721 7.868e-01 -0.132 0.1731 43 ## education80 2.61208 2.70857 0.9644 3.403e-01 -2.850 8.0744 43 ## lny80 -2.38309 0.49147 -4.8489 1.658e-05 -3.374 -1.3920 43 ## ## Multiple R-squared: 0.5619 , Adjusted R-squared: 0.5313 ## F-statistic: 20.21 on 3 and 43 DF, p-value: 2.531e-08 youdou_55_2 &lt;- lm_robust(growthrate8099 ~ norm80 + education80 + lny80, data = youdou, se_type = &quot;stata&quot;) summary(youdou_55_2) ## ## Call: ## lm_robust(formula = growthrate8099 ~ norm80 + education80 + lny80, ## data = youdou, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 5.2909 0.6682 7.918 6.204e-10 3.94324 6.6385 43 ## norm80 0.3383 0.1370 2.469 1.758e-02 0.06202 0.6145 43 ## education80 4.3872 1.9611 2.237 3.051e-02 0.43233 8.3421 43 ## lny80 -1.9911 0.5746 -3.465 1.213e-03 -3.14987 -0.8324 43 ## ## Multiple R-squared: 0.6391 , Adjusted R-squared: 0.614 ## F-statistic: 41.04 on 3 and 43 DF, p-value: 1.11e-12 実証例5.2 FWL定理の確認 定数項なしの回帰を実行するには, formulaに+0か-1を追加する(参考). なお, estimatr::lm_robust()にはlmのようにresidualsがないため, 必要ならば手動で追加する(参考). ただしこの例では標準偏差は必要でないため, lmを用いた. fwl_1 &lt;- lm(trust80 ~ education80 + lny80, data = youdou) summary(fwl_1) ## ## Call: ## lm(formula = trust80 ~ education80 + lny80, data = youdou) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.18774 -0.48567 -0.02193 0.56490 1.41091 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.6740 0.9493 2.817 0.00723 ** ## education80 -11.2886 4.5080 -2.504 0.01606 * ## lny80 -1.0254 0.9692 -1.058 0.29584 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6555 on 44 degrees of freedom ## Multiple R-squared: 0.4246, Adjusted R-squared: 0.3985 ## F-statistic: 16.24 on 2 and 44 DF, p-value: 5.233e-06 fwl_2 &lt;- lm(growthrate8099 ~ education80 + lny80, data = youdou) summary(fwl_2) ## ## Call: ## lm(formula = growthrate8099 ~ education80 + lny80, data = youdou) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.46861 -0.23426 0.00308 0.13266 1.01937 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.1039 0.4403 13.863 &lt; 2e-16 *** ## education80 2.3797 2.0909 1.138 0.261 ## lny80 -2.4042 0.4495 -5.348 3.03e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.304 on 44 degrees of freedom ## Multiple R-squared: 0.561, Adjusted R-squared: 0.5411 ## F-statistic: 28.12 on 2 and 44 DF, p-value: 1.36e-08 lm(fwl_2$residuals ~ 0 + fwl_1$residuals) %&gt;% summary() ## ## Call: ## lm(formula = fwl_2$residuals ~ 0 + fwl_1$residuals) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.45839 -0.21925 -0.00947 0.13042 1.03231 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## fwl_1$residuals 0.02058 0.06832 0.301 0.765 ## ## Residual standard error: 0.2971 on 46 degrees of freedom ## Multiple R-squared: 0.00197, Adjusted R-squared: -0.01973 ## F-statistic: 0.09078 on 1 and 46 DF, p-value: 0.7645 実証例5.3 FWL定理の別表現の確認 lm(growthrate8099 ~ fwl_1$residuals-1, data = youdou) %&gt;% summary() ## ## Call: ## lm(formula = growthrate8099 ~ fwl_1$residuals - 1, data = youdou) ## ## Residuals: ## Min 1Q Median 3Q Max ## 2.189 2.816 3.086 3.546 3.915 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## fwl_1$residuals 0.02058 0.73877 0.028 0.978 ## ## Residual standard error: 3.212 on 46 degrees of freedom ## Multiple R-squared: 1.688e-05, Adjusted R-squared: -0.02172 ## F-statistic: 0.0007764 on 1 and 46 DF, p-value: 0.9779 実証例5.4 信頼と規範が経済成長に与える影響の重回帰分析の標準誤差 実証例5.1を参照せよ. 実証例5.5 信頼と規範が経済成長に与える影響の多項式モデル youdou_515 &lt;- lm_robust(growthrate8099 ~ y80 + I(y80^2), data = youdou, se_type = &quot;stata&quot;) summary(youdou_515) ## ## Call: ## lm_robust(formula = growthrate8099 ~ y80 + I(y80^2), data = youdou, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.51866 1.38538 4.705 2.535e-05 3.72662 9.3107 44 ## y80 -1.22615 0.70791 -1.732 9.027e-02 -2.65285 0.2005 44 ## I(y80^2) 0.08935 0.08861 1.008 3.188e-01 -0.08923 0.2679 44 ## ## Multiple R-squared: 0.5503 , Adjusted R-squared: 0.5299 ## F-statistic: 27.39 on 2 and 44 DF, p-value: 1.879e-08 図5-1 散布図と推定された回帰曲線 youdou %&gt;% ggplot(aes(x = y80, y = growthrate8099)) + geom_point() + xlab(&quot;初期時点GDP&quot;) + ylab(&quot;経済成長率&quot;) + geom_smooth(method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = FALSE, color = &quot;black&quot;) 例題5.5 lm_robust(growthrate8099 ~ lny80 * education80, data = youdou, se_type = &quot;stata&quot;) %&gt;% summary() ## ## Call: ## lm_robust(formula = growthrate8099 ~ lny80 * education80, data = youdou, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.0868 1.1220 5.42485 2.492e-06 3.824 8.3496 43 ## lny80 -2.3937 0.8477 -2.82364 7.167e-03 -4.103 -0.6841 43 ## education80 2.5735 11.0413 0.23308 8.168e-01 -19.693 24.8405 43 ## lny80:education80 -0.1211 7.1314 -0.01698 9.865e-01 -14.503 14.2608 43 ## ## Multiple R-squared: 0.561 , Adjusted R-squared: 0.5304 ## F-statistic: 18.45 on 3 and 43 DF, p-value: 7.651e-08 実証例5.6 都市化の度合いと初期時点GDPの交互作用 先にダミー変数urbanを作成してから回帰分析を実行する(下ではurbanの型はintではなくboolになるが構わない). urbanの値により標本を分ける場合は, lm()のdataでfilter()を使えばよい. youdou &lt;- youdou %&gt;% mutate(urban = did &gt; 0.4) lm(growthrate8099 ~ urban * lny80, data = youdou) %&gt;% summary() ## ## Call: ## lm(formula = growthrate8099 ~ urban * lny80, data = youdou) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.51040 -0.21003 -0.02406 0.16516 0.90189 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.74905 0.57763 9.953 9.96e-13 *** ## urbanTRUE -0.17551 0.82444 -0.213 0.832421 ## lny80 -1.91120 0.45104 -4.237 0.000117 *** ## urbanTRUE:lny80 0.06441 0.61108 0.105 0.916546 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3092 on 43 degrees of freedom ## Multiple R-squared: 0.5564, Adjusted R-squared: 0.5254 ## F-statistic: 17.98 on 3 and 43 DF, p-value: 1.041e-07 lm(growthrate8099 ~ lny80, data = (youdou %&gt;% filter(!urban))) %&gt;% summary() ## ## Call: ## lm(formula = growthrate8099 ~ lny80, data = (youdou %&gt;% filter(!urban))) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.51040 -0.22240 -0.02406 0.12827 0.90189 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.7491 0.6512 8.829 7.59e-09 *** ## lny80 -1.9112 0.5085 -3.759 0.00102 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3486 on 23 degrees of freedom ## Multiple R-squared: 0.3805, Adjusted R-squared: 0.3536 ## F-statistic: 14.13 on 1 and 23 DF, p-value: 0.001022 lm(growthrate8099 ~ lny80, data = (youdou %&gt;% filter(urban))) %&gt;% summary() ## ## Call: ## lm(formula = growthrate8099 ~ lny80, data = (youdou %&gt;% filter(urban))) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.35740 -0.19171 -0.05236 0.17634 0.49475 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.5735 0.4881 11.419 3.25e-10 *** ## lny80 -1.8468 0.3421 -5.399 2.77e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2565 on 20 degrees of freedom ## Multiple R-squared: 0.593, Adjusted R-squared: 0.5727 ## F-statistic: 29.14 on 1 and 20 DF, p-value: 2.769e-05 実証例5.7 都市化の度合いと初期時点GDPのダミー変数同士の交互作用 やはり, 先にダミー変数lny80dを作成する. youdou &lt;- youdou %&gt;% mutate(lny80d = lny80 &gt; 1.4) lm(growthrate8099 ~ urban * lny80d, data = youdou) %&gt;% summary() ## ## Call: ## lm(formula = growthrate8099 ~ urban * lny80d, data = youdou) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.50919 -0.25376 -0.01148 0.24475 0.85353 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.45474 0.07544 45.793 &lt; 2e-16 *** ## urbanTRUE -0.23329 0.12459 -1.872 0.067953 . ## lny80dTRUE -0.58003 0.15400 -3.767 0.000498 *** ## urbanTRUE:lny80dTRUE 0.04725 0.20827 0.227 0.821596 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3288 on 43 degrees of freedom ## Multiple R-squared: 0.4982, Adjusted R-squared: 0.4631 ## F-statistic: 14.23 on 3 and 43 DF, p-value: 1.401e-06 実証例5.8 非線形モデルにおける結合仮説の検定 実証例5.5を参照せよ. 実証例5.9 ポンフェローニ検定 式は実証例5.1を参照せよ. 規範と教育水準の係数が両方とも0であるという帰無仮説を検定する. F検定統計値はcar::linearHypothesis()を使うことで求められる. linearHypothesis(youdou_55_2, c(&quot;norm80&quot;,&quot;education80&quot;), test = &quot;F&quot;) ## ## Linear hypothesis test: ## norm80 = 0 ## education80 = 0 ## ## Model 1: restricted model ## Model 2: growthrate8099 ~ norm80 + education80 + lny80 ## ## Res.Df Df F Pr(&gt;F) ## 1 45 ## 2 43 2 5.4375 0.007848 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 表5-5 記述統計量 modelsummary::datasummary()を使うことで簡単に記述統計表が作成できる. ここでは統計量と変数名の表示を日本語に直すため, 一旦dataframeで書き出し, 再度gtで修正した表を表示している. # 変数を選択 vars &lt;- youdou %&gt;% select(growthrate8099, trust80, norm80, education80, lny80) table55 &lt;- datasummary(All(vars) ~ N + Mean + SD + Min + Max, data = youdou, output = &quot;data.frame&quot;, fmt = 3) # 列名 colnames(table55) &lt;- c(&quot;変数&quot;, &quot;サンプルサイズ&quot;, &quot;平均&quot;, &quot;標準偏差&quot;, &quot;最小値&quot;, &quot;最大値&quot;) # 変数名 table55[,1] &lt;- c(&quot;経済成長率&quot;, &quot;信頼&quot;, &quot;規範&quot;, &quot;教育水準&quot;, &quot;初期時点対数GDP&quot;) # 表を出力 gt(table55) #pfqpclpuls table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #pfqpclpuls thead, #pfqpclpuls tbody, #pfqpclpuls tfoot, #pfqpclpuls tr, #pfqpclpuls td, #pfqpclpuls th { border-style: none; } #pfqpclpuls p { margin: 0; padding: 0; } #pfqpclpuls .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pfqpclpuls .gt_caption { padding-top: 4px; padding-bottom: 4px; } #pfqpclpuls .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pfqpclpuls .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pfqpclpuls .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pfqpclpuls .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pfqpclpuls .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pfqpclpuls .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pfqpclpuls .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pfqpclpuls .gt_column_spanner_outer:first-child { padding-left: 0; } #pfqpclpuls .gt_column_spanner_outer:last-child { padding-right: 0; } #pfqpclpuls .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pfqpclpuls .gt_spanner_row { border-bottom-style: hidden; } #pfqpclpuls .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #pfqpclpuls .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pfqpclpuls .gt_from_md > :first-child { margin-top: 0; } #pfqpclpuls .gt_from_md > :last-child { margin-bottom: 0; } #pfqpclpuls .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pfqpclpuls .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pfqpclpuls .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pfqpclpuls .gt_row_group_first td { border-top-width: 2px; } #pfqpclpuls .gt_row_group_first th { border-top-width: 2px; } #pfqpclpuls .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pfqpclpuls .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pfqpclpuls .gt_first_summary_row.thick { border-top-width: 2px; } #pfqpclpuls .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pfqpclpuls .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pfqpclpuls .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pfqpclpuls .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #pfqpclpuls .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pfqpclpuls .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pfqpclpuls .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pfqpclpuls .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pfqpclpuls .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pfqpclpuls .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pfqpclpuls .gt_left { text-align: left; } #pfqpclpuls .gt_center { text-align: center; } #pfqpclpuls .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pfqpclpuls .gt_font_normal { font-weight: normal; } #pfqpclpuls .gt_font_bold { font-weight: bold; } #pfqpclpuls .gt_font_italic { font-style: italic; } #pfqpclpuls .gt_super { font-size: 65%; } #pfqpclpuls .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #pfqpclpuls .gt_asterisk { font-size: 100%; vertical-align: 0; } #pfqpclpuls .gt_indent_1 { text-indent: 5px; } #pfqpclpuls .gt_indent_2 { text-indent: 10px; } #pfqpclpuls .gt_indent_3 { text-indent: 15px; } #pfqpclpuls .gt_indent_4 { text-indent: 20px; } #pfqpclpuls .gt_indent_5 { text-indent: 25px; } #pfqpclpuls .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #pfqpclpuls div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } 変数 サンプルサイズ 平均 標準偏差 最小値 最大値 経済成長率 47 3.147 0.449 2.185 3.920 信頼 47 0.033 0.845 -1.668 1.918 規範 47 0.101 0.542 -1.248 1.297 教育水準 47 0.112 0.036 0.069 0.238 初期時点対数GDP 47 1.341 0.167 1.037 1.703 表5-6 推定結果: 被説明変数は経済成長率 回帰結果の表はmodelsummaryを使う (stargazerでも可能だが更新が止まっており, estimatrの結果を表示できないなどデメリットがある). modelsummary::msummary()のgoef_omitで表示しない統計量を指定できるが, これは正規表現を使っているため, 自由度修正済み決定係数\\(\\bar{R}^2\\)を表示し, 通常の決定係数\\(R^2\\)を表示させないためにはR2$とすればよい. F検定統計量の値を表示するにあたっては, このサイトを参考にした. models &lt;- list( &quot;(1)&quot; = lm_robust(growthrate8099 ~ trust80, data = youdou, se_type = &quot;stata&quot;), &quot;(2)&quot; = lm_robust(growthrate8099 ~ norm80, data = youdou, se_type = &quot;stata&quot;), &quot;(3)&quot; = lm_robust(growthrate8099 ~ trust80 + norm80, data = youdou, se_type = &quot;stata&quot;), &quot;(4)&quot; = lm_robust(growthrate8099 ~ trust80 + lny80 + education80, data = youdou, se_type = &quot;stata&quot;), &quot;(5)&quot; = lm_robust(growthrate8099 ~ norm80 + lny80 + education80, data = youdou, se_type = &quot;stata&quot;), &quot;(6)&quot; = lm_robust(growthrate8099 ~ trust80 + norm80 + lny80 + education80, data = youdou, se_type = &quot;stata&quot;)) # F検定統計量の値を表示するモデルを指定 attr(models[3]$`(3)`, &quot;FTEST&quot;) &lt;- TRUE attr(models[6]$`(6)`, &quot;FTEST&quot;) &lt;- TRUE glance_custom.lm_robust &lt;- function(x) { # 上で指定した, F検定統計量の値を表示したいモデルでなければパス if (!isTRUE(attr(x, &quot;FTEST&quot;))) return(NULL) # F検定を実行 ftest &lt;- linearHypothesis(x, test = &quot;F&quot;, c(&quot;trust80&quot;, &quot;norm80&quot;)) # F検定統計量の値とp値をまとめたtibbleを作成 out &lt;- tibble( &quot;F検定統計量の値 $H_0: \\\\beta_{信頼}=0, \\\\beta_{規範}=0$&quot; = ftest[[&quot;F&quot;]][2], &quot; &quot; = sprintf(&quot;(%.3f)&quot;, ftest[[&quot;Pr(&gt;F)&quot;]][2])) return(out) } gm &lt;- tribble( ~raw, ~clean, ~fmt, &quot;F検定統計量の値 $H_0: \\\\beta_{信頼}=0, \\\\beta_{規範}=0$&quot;, &quot;F検定統計量の値 $H_0: \\\\beta_{信頼}=0, \\\\beta_{規範}=0$&quot;, 3, &quot; &quot;, &quot; &quot;, 3, &quot;adj.r.squared&quot;, &quot;$\\\\bar{R}^2$&quot;, 3, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) cm &lt;- c(&quot;trust80&quot; = &quot;信頼&quot;, &quot;norm80&quot; = &quot;規範&quot;, &quot;lny80&quot; = &quot;初期時点対数GDP&quot;, &quot;education80&quot; = &quot;教育水準&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) msummary(models, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), gof_omit=&#39;R2$|RMSE|AIC|BIC|Log.Lik.&#39;, gof_map = gm, coef_map = cm, output = &quot;kableExtra&quot;, estimate = &quot;{estimate}{stars}&quot;, notes = &quot;* p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001&quot;) %&gt;% row_spec(c(0, 12, 14), extra_css = &quot;border-bottom: 1.5px solid&quot;) %&gt;% row_spec(10, extra_css = &quot;;border-bottom: 1.5px solid&quot;) # 32行目の下 (estimateとstatisticsの境) のみコロンが必要 &amp;nbsp;(1) &amp;nbsp;&amp;nbsp;(2) &amp;nbsp;&amp;nbsp;(3) &amp;nbsp;&amp;nbsp;(4) &amp;nbsp;&amp;nbsp;(5) &amp;nbsp;&amp;nbsp;(6) 信頼 0.225** 0.036 0.021 −0.012 (0.066) (0.082) (0.076) (0.081) 規範 0.560*** 0.529*** 0.338* 0.342* (0.071) (0.102) (0.137) (0.148) 初期時点対数GDP −2.383*** −1.991** −1.999*** (0.491) (0.575) (0.556) 教育水準 2.612 4.387* 4.270 (2.709) (1.961) (2.237) 定数項 3.139*** 3.091*** 3.092*** 6.049*** 5.291*** 5.315*** (0.060) (0.048) (0.048) (0.426) (0.668) (0.603) F検定統計量の値 \\(H_0: \\beta_{信頼}=0, \\beta_{規範}=0\\) 29.874 3.460 (0.000) (0.041) \\(\\bar{R}^2\\) 0.161 0.444 0.435 0.531 0.614 0.605 サンプルサイズ 47 47 47 47 47 47 * p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001 F検定統計量の星の表示は, 手動で追加する必要があると思われるので, 一旦省略とする. 表5-7 推定結果 サポートサイトにはデータはないが, Rではwooldridgeパッケージにまとめられているデータattendを用いることができる. data(&#39;attend&#39;) models_57 &lt;- list( &quot;(1)&quot; = lm_robust(stndfnl ~ atndrte + frosh + soph, data = attend, se_type = &quot;stata&quot;), &quot;(2)&quot; = lm_robust(stndfnl ~ atndrte + priGPA + ACT + frosh + soph, data = attend, se_type = &quot;stata&quot;), &quot;(3)&quot; = lm_robust(stndfnl ~ atndrte * priGPA + ACT + frosh + soph, data = attend, se_type = &quot;stata&quot;), &quot;(4)&quot; = lm_robust(stndfnl ~ atndrte + priGPA + I(priGPA^2) + ACT + I(ACT^2) + frosh + soph, data = attend, se_type = &quot;stata&quot;), &quot;(5)&quot; = lm_robust(stndfnl ~ atndrte * priGPA + atndrte * I(priGPA^2) + ACT + I(ACT^2) + frosh + soph, data = attend, se_type = &quot;stata&quot;)) cm &lt;- c(&quot;atndrte&quot; = &quot;出席割合&quot;, &quot;priGPA&quot; = &quot;前学期までのGPA&quot;, &quot;I(priGPA^2)&quot; = &quot;前学期までのGPA$^2$&quot;, &quot;atndrte:priGPA&quot; = &quot;出席割合 $\\\\times$ 前学期までのGPA&quot;, &quot;atndrte:I(priGPA^2)&quot; = &quot;出席割合 $\\\\times$ 前学期までのGPA$^2$&quot;, &quot;ACT&quot; = &quot;ACT&quot;, &quot;I(ACT^2)&quot; = &quot;ACT$^2$&quot;, &quot;frosh&quot; = &quot;1年生&quot;, &quot;soph&quot; = &quot;2年生&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) gm &lt;- tribble( ~raw, ~clean, ~fmt, &quot;adj.r.squared&quot;, &quot;$\\\\bar{R}^2$&quot;, 2, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) # 丸め関数を定義 custom_format &lt;- function(values) { formatted_values &lt;- ifelse(values &lt; 1, signif(values, digits=2), round(values, digits=2)) return(formatted_values) } # なぜか定数項だけ丸めがおかしい? msummary(models_57, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), gof_omit=&#39;R2$|RMSE|AIC|BIC|Log.Lik.&#39;, coef_map = cm, gof_map = gm, estimate = &quot;{estimate}{stars}&quot;, output = &quot;kableExtra&quot;, notes = &quot;* p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001&quot;, fmt = custom_format) %&gt;% row_spec(c(0, 22), extra_css = &quot;border-bottom: 1.5px solid&quot;) %&gt;% row_spec(20, extra_css = &quot;;border-bottom: 1.5px solid&quot;) # 20行目の下 (estimateとstatisticsの境) のみコロンが必要 &amp;nbsp;(1) &amp;nbsp;&amp;nbsp;(2) &amp;nbsp;&amp;nbsp;(3) &amp;nbsp;&amp;nbsp;(4) &amp;nbsp;&amp;nbsp;(5) 出席割合 0.0082*** 0.0052* −0.022* 0.0062** 0.065* (0.0021) (0.0024) (0.0088) (0.0023) (0.032) 前学期までのGPA 0.43*** −0.56 −1.5** 3.63 (0.086) (0.32) (0.49) (2.21) 前学期までのGPA\\(^2\\) 0.37*** −0.82 (0.09) (0.45) 出席割合 \\(\\times\\) 前学期までのGPA 0.012** −0.057* (0.0037) (0.026) 出席割合 \\(\\times\\) 前学期までのGPA\\(^2\\) 0.013* (0.0052) ACT 0.084*** 0.082*** −0.11 −0.11 (0.011) (0.011) (0.1) (0.1) ACT\\(^2\\) 0.0042 0.0042 (0.0023) (0.0022) 1年生 −0.29* −0.049 −0.063 −0.11 −0.1 (0.11) (0.11) (0.1) (0.1) (0.1) 2年生 −0.12 −0.16 −0.17 −0.18* −0.19* (0.1) (0.089) (0.088) (0.087) (0.086) 定数項 −0.5** −3.3*** −1 1.38 −3.9 (0.18) (0.3) (0.76) (1.24) (2.95) \\(\\bar{R}^2\\) 0.02 0.20 0.21 0.22 0.23 サンプルサイズ 680 680 680 680 680 * p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001 F検定統計量の表への記載は省略とし, 下に検定結果を示す. linearHypothesis(models_57[3]$`(3)`, test = &quot;F&quot;, c(&quot;atndrte&quot;, &quot;atndrte:priGPA&quot;)) ## ## Linear hypothesis test: ## atndrte = 0 ## atndrte:priGPA = 0 ## ## Model 1: restricted model ## Model 2: stndfnl ~ atndrte * priGPA + ACT + frosh + soph ## ## Res.Df Df F Pr(&gt;F) ## 1 675 ## 2 673 2 7.8085 0.0004442 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 linearHypothesis(models_57[4]$`(4)`, test = &quot;F&quot;, c(&quot;I(priGPA^2)&quot;, &quot;I(ACT^2)&quot;)) ## ## Linear hypothesis test: ## I(priGPA^2) = 0 ## I(ACT^2) = 0 ## ## Model 1: restricted model ## Model 2: stndfnl ~ atndrte + priGPA + I(priGPA^2) + ACT + I(ACT^2) + frosh + ## soph ## ## Res.Df Df F Pr(&gt;F) ## 1 674 ## 2 672 2 11.772 9.438e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 linearHypothesis(models_57[5]$`(5)`, test = &quot;F&quot;, c(&quot;atndrte&quot;, &quot;atndrte:priGPA&quot;, &quot;atndrte:I(priGPA^2)&quot;)) ## ## Linear hypothesis test: ## atndrte = 0 ## atndrte:priGPA = 0 ## atndrte:I(priGPA^2) = 0 ## ## Model 1: restricted model ## Model 2: stndfnl ~ atndrte * priGPA + atndrte * I(priGPA^2) + ACT + I(ACT^2) + ## frosh + soph ## ## Res.Df Df F Pr(&gt;F) ## 1 673 ## 2 670 3 6.2543 0.0003437 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 linearHypothesis(models_57[5]$`(5)`, test = &quot;F&quot;, c(&quot;I(priGPA^2)&quot;, &quot;atndrte:I(priGPA^2)&quot;, &quot;I(ACT^2)&quot;)) ## ## Linear hypothesis test: ## I(priGPA^2) = 0 ## atndrte:I(priGPA^2) = 0 ## I(ACT^2) = 0 ## ## Model 1: restricted model ## Model 2: stndfnl ~ atndrte * priGPA + atndrte * I(priGPA^2) + ACT + I(ACT^2) + ## frosh + soph ## ## Res.Df Df F Pr(&gt;F) ## 1 673 ## 2 670 3 7.5692 5.521e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 linearHypothesis(models_57[5]$`(5)`, test = &quot;F&quot;, c(&quot;atndrte:priGPA&quot;, &quot;atndrte:I(priGPA^2)&quot;)) ## ## Linear hypothesis test: ## atndrte:priGPA = 0 ## atndrte:I(priGPA^2) = 0 ## ## Model 1: restricted model ## Model 2: stndfnl ~ atndrte * priGPA + atndrte * I(priGPA^2) + ACT + I(ACT^2) + ## frosh + soph ## ## Res.Df Df F Pr(&gt;F) ## 1 672 ## 2 670 2 5.1942 0.005774 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 練習問題 5-14 [実証] 表5-6を参照せよ. 自由度修正済み決定係数\\(\\bar{R}^2\\)は以下のように定義される (p.158). \\[\\bar{R}^2 = 1 - \\frac{N-1}{N-k-1}\\frac{\\sum_{i=1}^N\\hat{u}_i^2}{\\sum_{i=1}^N(Y_i-\\bar{Y}^2)}\\]. これを決定係数\\(R^2\\)の定義と比べると, 自由度修正済み決定係数は変数の数\\(k\\)が増えるたびに値が小さくなることがわかる. 決定係数\\(R^2\\)ではこのようなことは起きず, 変数の数を増やすと\\(R^2\\)の値は必ず変わらないか大きくなり, 小さくなることはない. 問題文の指示の通り回帰分析を実行する. 1つめの方法では標準偏差の値は一致しないが, 2つ目の方法では一致することが確認できる. practice514c_1 &lt;- lm(trust80 ~ norm80, data = youdou) practice514c_2 &lt;- lm_robust(growthrate8099 ~ 0 + practice514c_1$residuals, data = youdou, se_type = &quot;stata&quot;) summary(practice514c_2)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## practice514c_1$residuals 0.0358709 0.7030377 0.05102272 0.9595283 -1.379271 ## CI Upper DF ## practice514c_1$residuals 1.451012 46 practice514c_3 &lt;- lm(growthrate8099 ~ norm80, data = youdou) practice514c_4 &lt;- lm(trust80 ~ 0 + norm80, data = youdou) practice514c_5 &lt;- lm_robust(practice514c_3$residuals ~ 0 + practice514c_4$residuals, se_type = &quot;stata&quot;) summary(practice514c_5)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## practice514c_4$residuals 0.03566014 0.08075573 0.4415803 0.6608618 -0.1268927 ## CI Upper DF ## practice514c_4$residuals 0.198213 46 練習問題 5-15 [実証] データはStataで用いられる.dta形式になっているが, これをRで読み込むにはhaven::read_dta()を使う. timss &lt;- read_dta(&quot;data/05_第5章/timss.dta&quot;) practice5_15_a &lt;- lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4, data = timss, se_type = &quot;stata&quot;) practice5_15_c &lt;- lm_robust(mathscore ~ gender*agese_q2 + gender*agese_q3 + gender*agese_q4, data = timss, se_type = &quot;stata&quot;) practice5_15_d &lt;- lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, data = timss, se_type = &quot;stata&quot;) practice5_15_ea &lt;- lm_robust(sciencescore ~ agese_q2 + agese_q3 + agese_q4, data = timss, se_type = &quot;stata&quot;) practice5_15_ec &lt;- lm_robust(sciencescore ~ gender*agese_q2 + gender*agese_q3 + gender*agese_q4, data = timss, se_type = &quot;stata&quot;) practice5_15_ed &lt;- lm_robust(sciencescore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, data = timss, se_type = &quot;stata&quot;) 結果をmodelsummaryで表にまとめる. (d)で用いるダミー変数はcoef_mapで指定して表示を省略している. models_5_15 &lt;- list() models_5_15[[&#39;a&#39;]] &lt;- practice5_15_a models_5_15[[&#39;c&#39;]] &lt;- practice5_15_c models_5_15[[&#39;d&#39;]] &lt;- practice5_15_d models_5_15[[&#39;ea&#39;]] &lt;- practice5_15_ea models_5_15[[&#39;ec&#39;]] &lt;- practice5_15_ec models_5_15[[&#39;ed&#39;]] &lt;- practice5_15_ed cm &lt;- c(&quot;agese_q2&quot;, &quot;agese_q3&quot;, &quot;agese_q4&quot;, &quot;gender&quot;, &quot;gender:agese_q2&quot;, &quot;gender:agese_q3&quot;, &quot;gender:agese_q4&quot;, &quot;(Intercept)&quot;) gm &lt;- tribble( ~raw, ~clean, ~fmt, &quot;adj.r.squared&quot;, &quot;$\\\\bar{R}^2$&quot;, 2, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) msummary(models_5_15, coef_map = cm, gof_map = gm, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), estimate = &quot;{estimate}{stars}&quot;, output = &quot;kableExtra&quot;, notes = &quot;* p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001&quot;) %&gt;% row_spec(c(0, 18), extra_css = &quot;border-bottom: 1.5px solid&quot;) %&gt;% row_spec(16, extra_css = &quot;;border-bottom: 1.5px solid&quot;) # 16行目の下 (estimateとstatisticsの境) のみコロンが必要 a c d ea ec ed agese_q2 0.174 −0.500 0.218 0.261 0.006 0.317 (0.412) (1.282) (0.394) (0.420) (1.302) (0.406) agese_q3 −0.346 −1.516 −0.460 −0.543 −1.274 −0.614 (0.415) (1.291) (0.395) (0.419) (1.274) (0.406) agese_q4 −1.558*** −2.935* −1.336*** −1.717*** −1.963 −1.522*** (0.419) (1.289) (0.403) (0.428) (1.312) (0.413) gender −0.137 1.031 (0.586) (0.611) gender:agese_q2 0.445 0.147 (0.824) (0.840) gender:agese_q3 0.783 0.487 (0.830) (0.839) gender:agese_q4 0.920 0.160 (0.839) (0.856) (Intercept) 150.363*** 150.568*** 146.798*** 150.453*** 148.915*** 150.811*** (0.293) (0.908) (2.392) (0.305) (0.923) (1.884) \\(\\bar{R}^2\\) 0.00 0.00 0.09 0.00 0.01 0.07 サンプルサイズ 4536 4536 4536 4536 4536 4536 * p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001 上の表のa式を見ると, agese_q4の係数は有意に負であることがわかる. つまり, この結果では早生まれの人の成績は4月から6月に生まれた人に比べて低いといえる. 生まれた四半期のダミー変数を4つすべて含むと, ダミー変数の罠に陥る. 4月から6月に生まれた人を表すダミー変数を使用する場合, 定数項なしの回帰を行うことでダミー変数の罠を避けられる. 4月から6月に生まれた人, 早生まれの人を表すダミー変数の係数をそれぞれ\\(\\beta_{Q1}, \\beta_{Q4}\\)とおくと, 帰無仮説は\\(H_0: \\beta_{Q4} &lt; \\beta_{Q1}\\)とすればよい. 上の表のc式を見ると, genderとそれを含む交差項の係数はみな有意とは言えない. つまり, 早生まれの人の成績差に性別は関係がみられなかったとわかる. 上の表のd式を見ると, やはりagese_q4の係数は有意に負であることがわかる (表ではダミー変数の結果は省略している). 対応するモデルを上の表のea, ec, ed式に示す. ea, ed式においてはagese_q4の係数はやはり有意に負であり,その大きさは数学に比べてわずかに大きい. "],["ch6.html", "第6章 パネルデータ分析 (6.1) 式 実証例6.1 保育所が母親の就業に与え影響の固定効果推定 実証例6.2 保育所が母親の就業に与える影響の固定効果推定の標準誤差 実証例6.3 保育所が母親の就業に与え影響のプールされたOLS推定の標準誤差 実証例6.4 保育所が母親の就業に与える影響の時間効果を入れた分析 実証例6.5 保育所が母親の就業に与える影響の都道府県効果と年効果を入れた分析 実証例6.6 保育所が母親の就業に与える影響の個別トレンドと年効果を入れた分析 表6-3 記述統計量 表6-4 年ごとの記述統計量 表6-5 推定結果 練習問題 6-10 [実証] 練習問題 6-11 [実証]", " 第6章 パネルデータ分析 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support06.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support06.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support06.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(estimatr) library(modelsummary) library(fixest) library(gt) library(haven) 固定効果モデルをRで推定するためのパッケージは複数あり, これまで使ってきたestimatrのほかにfixestやplmなどが挙げられる. ここではestimatrに加えて, 処理が高速とされるfixestでの推定方法も記す. (6.1) 式 はじめにデータを読み込む. データ読込時, 本文中で分析されている通りに絞り込みを行う. yamaguchi &lt;- read.csv(&quot;data/06_第6章/yamaguchi.csv&quot;) yamaguchi &lt;- yamaguchi %&gt;% filter(year &gt; 1999) %&gt;% filter(hh.type == &quot;all&quot;) 通常通りestimatr::lm_robust()で不均一分散を仮定して回帰するか, feols()を用いることもできる. feols()ではvcov = \"HC1\"と指定することでStataと同じ標準偏差を得られる. lm_robust(emp.rate ~ cap.rate, data = yamaguchi, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.2081492 0.01814393 11.47212 7.493392e-22 0.1722755 0.2440230 139 ## cap.rate 0.6154919 0.04391207 14.01646 2.244232e-28 0.5286699 0.7023139 139 feols(emp.rate ~ cap.rate, vcov = &quot;HC1&quot;, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Standard-errors: Heteroskedasticity-robust ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.208149 0.018144 11.4721 &lt; 2.2e-16 *** ## cap.rate 0.615492 0.043912 14.0165 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.066148 Adj. R2: 0.530204 実証例6.1 保育所が母親の就業に与え影響の固定効果推定 固定効果モデルもlm_robust()で推定できる. clusters引数にクラスタのレベル, fixed_effectsに固定効果の変数を指定する. feolsではパイプ|の後ろに固定効果の変数を指定するのが本来の方法で, デフォルトでクラスター構造に頑健な標準誤差が得られるはずだが, なぜか異なる値となった. ご存じの方ご教授ください. かわりに固定効果の変数とするprefを直接formulaに足すことで, Stataと同じ標準誤差を得られた. lm_robust(emp.rate ~ cap.rate, data = yamaguchi, clusters = pref, fixed_effects = pref, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.8051027 0.0553063 14.55716 7.736456e-19 0.6937769 0.9164285 46 feols(emp.rate ~ cap.rate + pref, cluster = ~pref, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.089848 0.021462 4.18630 1.2656e-04 *** ## cap.rate 0.805103 0.055306 14.55716 &lt; 2.2e-16 *** ## pref京都府 -0.015791 0.001458 -10.82826 3.0501e-14 *** ## pref佐賀県 0.101711 0.000079 1291.87409 &lt; 2.2e-16 *** ## pref兵庫県 0.013938 0.007831 1.77976 8.1722e-02 . ## pref北海道 0.047209 0.008154 5.78946 5.9824e-07 *** ## pref千葉県 0.036871 0.009491 3.88481 3.2612e-04 *** ## pref和歌山県 -0.100145 0.003400 -29.45717 &lt; 2.2e-16 *** ## ... 40 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.012388 Adj. R2: 0.975372 # このやり方のほうが直感的だと思うのですが, なぜか同じ標準誤差を得られず... ご存じの方ご教授ください. # feols(emp.rate ~ cap.rate | pref, data = yamaguchi) 実証例6.2 保育所が母親の就業に与える影響の固定効果推定の標準誤差 実証例6.1を参照せよ. 実証例6.3 保育所が母親の就業に与え影響のプールされたOLS推定の標準誤差 自由度修正ホワイト標準誤差を得る式は(6.1)式を参照せよ. lm_robust()でクラスター構造に頑健な標準誤差を求めるにはclusters引数を指定する. 一方feols()ではvcov引数にクラスター構造を指定すればよい. # クラスター構造に頑健な標準誤差 lm_robust(emp.rate ~ cap.rate, data = yamaguchi, clusters = pref, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.2081492 0.02820058 7.381027 2.451454e-09 0.1513844 0.2649140 46 ## cap.rate 0.6154919 0.06742944 9.127940 6.822894e-12 0.4797635 0.7512203 46 feols(emp.rate ~ cap.rate, vcov = ~pref, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.208149 0.028201 7.38103 2.4515e-09 *** ## cap.rate 0.615492 0.067429 9.12794 6.8229e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.066148 Adj. R2: 0.530204 実証例6.4 保育所が母親の就業に与える影響の時間効果を入れた分析 lm_robust()では, fixed_effects引数に時間効果の変数yearを指定する. 一方feols()ではformulaの後ろに|を付けて固定効果の変数を指定する. lm_robust(emp.rate ~ cap.rate, data = yamaguchi, clusters = pref, fixed_effects = year, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.5848218 0.07301598 8.009504 2.863598e-10 0.4378482 0.7317953 46 feols(emp.rate ~ cap.rate | year, cluster = ~pref, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Fixed-effects: year: 3 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## cap.rate 0.584822 0.073016 8.0095 2.8636e-10 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.065255 Adj. R2: 0.536128 ## Within R2: 0.489665 実証例6.5 保育所が母親の就業に与える影響の都道府県効果と年効果を入れた分析 lm_robust()では, fixed_effects引数に都道府県効果と年効果両方pref + yearを指定する. 一方でfeols()では実証例6.1同様prefをパイプ|の後ろにいれると異なる標準誤差が出力されるため, やはりformulaに直接加え, cluster引数に都道府県を指定する. lm_robust(emp.rate ~ cap.rate, data = yamaguchi, clusters = pref, fixed_effects = pref + year, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.09032499 0.07356807 1.227774 0.2257775 -0.05775986 0.2384098 46 feols(emp.rate ~ cap.rate + pref | year, cluster = ~pref, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Fixed-effects: year: 3 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## cap.rate 0.090325 0.073568 1.22777 2.2578e-01 ## pref京都府 -0.034638 0.001940 -17.85623 &lt; 2.2e-16 *** ## pref佐賀県 0.102728 0.000105 980.90855 &lt; 2.2e-16 *** ## pref兵庫県 -0.087272 0.010417 -8.37790 8.2512e-11 *** ## pref北海道 -0.058177 0.010847 -5.36353 2.5715e-06 *** ## pref千葉県 -0.085792 0.012625 -6.79539 1.8483e-08 *** ## pref和歌山県 -0.056208 0.004522 -12.42916 2.6166e-16 *** ## pref埼玉県 -0.079666 0.014887 -5.35148 2.6792e-06 *** ## ... 39 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.007106 Adj. R2: 0.991718 ## Within R2: 0.993948 # 下では異なる標準誤差が出力される. # feols(emp.rate ~ cap.rate | pref + year, cluster = ~pref, data = yamaguchi) 実証例6.6 保育所が母親の就業に与える影響の個別トレンドと年効果を入れた分析 lm_robust()で複数の固定効果を入れるとき, formulaやfixed_effectsの指定の仕方によっては一部の変数がNAになるなど挙動がおかしくなることがある (参考). feols()では, formula中にi()を使って固定効果変数を指定することで, 正しい標準誤差が得られるが, 正しい標準誤差が必要ない場合はコメントした3つめの方法のほうが速いとのこと (feols公式リファレンスのInteractionsの節を見よ). lm_robust(emp.rate ~ cap.rate + pref + pref:year + factor(year), data = yamaguchi, clusters = pref, se_type = &quot;stata&quot;) ## 1 coefficient not defined because the design matrix is rank deficient ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) NA NA NA NA ## cap.rate 9.152586e-02 1.711945e-01 0.53463092 5.954800e-01 ## pref京都府 -2.871962e+00 2.980210e-01 -9.63677465 1.302610e-12 ## pref佐賀県 2.217746e+00 1.038863e+00 2.13478216 3.813866e-02 ## pref兵庫県 -1.674131e+00 3.096746e-01 -5.40609737 2.224415e-06 ## pref北海道 -2.027188e+00 3.719798e-01 -5.44972514 1.916879e-06 ## pref千葉県 1.008553e+00 8.235894e-01 1.22458214 2.269671e-01 ## pref和歌山県 -2.425115e+00 1.995858e+00 -1.21507391 2.305380e-01 ## pref埼玉県 -3.204944e+00 2.345052e-01 -13.66683775 8.267630e-18 ## pref大分県 5.073632e-03 1.070371e-01 0.04740068 9.623991e-01 ## pref大阪府 -3.544666e+00 5.791509e-01 -6.12045289 1.910245e-07 ## pref奈良県 -2.726156e+00 2.286274e-01 -11.92401378 1.133222e-15 ## pref宮城県 6.645164e+00 2.957274e-01 22.47057454 1.925684e-26 ## pref宮崎県 8.787160e-01 7.167609e-02 12.25954090 4.264852e-16 ## pref富山県 6.196146e-01 2.014006e+00 0.30765283 7.597352e-01 ## pref山口県 1.556481e+00 2.694339e-01 5.77685746 6.247431e-07 ## pref山形県 1.262470e+01 1.220833e+00 10.34105881 1.385765e-13 ## pref山梨県 1.024933e+00 2.030432e+00 0.50478581 6.161191e-01 ## pref岐阜県 1.822042e+00 5.200581e-01 3.50353633 1.034380e-03 ## pref岡山県 1.027390e+00 7.911333e-01 1.29863084 2.005433e-01 ## pref岩手県 3.840666e+00 2.153963e+00 1.78306992 8.117418e-02 ## pref島根県 -2.455887e+00 3.853635e+00 -0.63729092 5.270947e-01 ## pref広島県 1.248305e+00 3.022802e-01 4.12962970 1.515124e-04 ## pref徳島県 1.757559e+00 5.668540e-01 3.10054989 3.293771e-03 ## pref愛媛県 -4.404752e-01 7.973306e-01 -0.55243733 5.833233e-01 ## pref愛知県 3.278383e-01 7.286383e-01 0.44993284 6.548721e-01 ## pref新潟県 3.477857e+00 1.423998e+00 2.44231814 1.849492e-02 ## pref東京都 7.338397e-01 1.591782e+00 0.46101772 6.469583e-01 ## pref栃木県 3.625324e+00 8.809020e-02 41.15468113 6.112933e-38 ## pref沖縄県 4.899894e-01 6.460539e-01 0.75843429 4.520596e-01 ## pref滋賀県 1.900476e+00 2.319337e-01 8.19404868 1.533055e-10 ## pref熊本県 3.927163e+00 2.068275e-01 18.98762881 2.125341e-23 ## pref石川県 3.910248e-01 1.234511e+00 0.31674467 7.528704e-01 ## pref神奈川県 -6.634092e-01 1.870506e-01 -3.54668267 9.101361e-04 ## pref福井県 3.534852e+00 1.823700e+00 1.93828551 5.873952e-02 ## pref福岡県 1.497746e+00 6.314768e-01 2.37181530 2.194159e-02 ## pref福島県 1.117377e+01 5.085348e-01 21.97246851 4.954880e-26 ## pref秋田県 1.732411e+00 2.860854e+00 0.60555731 5.477851e-01 ## pref群馬県 -4.778096e+00 1.218682e+00 -3.92070884 2.917814e-04 ## pref茨城県 1.526224e+00 6.399066e-01 2.38507320 2.125240e-02 ## pref長崎県 -6.210215e-01 1.309920e+00 -0.47409124 6.376776e-01 ## pref長野県 2.192693e+00 1.028524e+00 2.13188335 3.838924e-02 ## pref青森県 -1.478740e+00 2.070665e+00 -0.71413775 4.787502e-01 ## pref静岡県 1.468932e+00 4.231490e-01 3.47142978 1.137182e-03 ## pref香川県 -2.331767e-01 1.591359e-01 -1.46526777 1.496500e-01 ## pref高知県 7.650533e+00 3.197364e-01 23.92762201 1.337744e-27 ## pref鳥取県 1.845473e+00 6.878888e-01 2.68280711 1.010907e-02 ## pref鹿児島県 -1.877756e+00 3.170802e-01 -5.92202350 3.789537e-07 ## factor(year)2005 3.621003e-02 5.450406e-03 6.64354739 3.125769e-08 ## factor(year)2010 7.467874e-02 1.192688e-02 6.26138176 1.173411e-07 ## pref三重県:year 1.644877e-04 3.027017e-05 5.43398685 2.022627e-06 ## pref京都府:year 1.579628e-03 1.206210e-04 13.09579396 3.974466e-17 ## pref佐賀県:year -8.903847e-04 5.485271e-04 -1.62322835 1.113748e-01 ## pref兵庫県:year 9.560232e-04 1.362719e-04 7.01555630 8.635591e-09 ## pref北海道:year 1.146626e-03 1.678456e-04 6.83143759 1.631637e-08 ## pref千葉県:year -3.812174e-04 3.951511e-04 -0.96473834 3.397205e-01 ## pref和歌山県:year 1.345951e-03 1.030958e-03 1.30553359 1.982033e-01 ## pref埼玉県:year 1.723351e-03 1.039687e-04 16.57567312 5.032897e-21 ## pref大分県:year 1.765525e-04 2.902556e-05 6.08265810 2.176731e-07 ## pref大阪府:year 1.880450e-03 3.080743e-04 6.10388586 2.022798e-07 ## pref奈良県:year 1.470248e-03 1.376076e-04 10.68435296 4.754684e-14 ## pref宮城県:year -3.142883e-03 1.619454e-04 -19.40706015 8.677081e-24 ## pref宮崎県:year -2.218564e-04 6.967251e-05 -3.18427498 2.604335e-03 ## pref富山県:year -7.061253e-05 1.046817e-03 -0.06745453 9.465122e-01 ## pref山口県:year -6.135854e-04 1.078606e-04 -5.68869014 8.458394e-07 ## pref山形県:year -6.020572e-03 6.333876e-04 -9.50535243 1.992064e-12 ## pref山梨県:year -3.363943e-04 1.047967e-03 -0.32099713 7.496664e-01 ## pref岐阜県:year -7.487609e-04 2.898465e-04 -2.58330181 1.303005e-02 ## pref岡山県:year -3.387222e-04 4.218142e-04 -0.80301292 4.260971e-01 ## pref岩手県:year -1.690788e-03 1.102209e-03 -1.53399990 1.318795e-01 ## pref島根県:year 1.475717e-03 1.960741e-03 0.75263199 4.555056e-01 ## pref広島県:year -4.637889e-04 1.782963e-04 -2.60122545 1.245268e-02 ## pref徳島県:year -6.795045e-04 3.146540e-04 -2.15952899 3.605737e-02 ## pref愛媛県:year 3.761926e-04 3.701080e-04 1.01644011 3.147364e-01 ## pref愛知県:year -2.571934e-05 3.373954e-04 -0.07622908 9.395674e-01 ## pref新潟県:year -1.503260e-03 7.502503e-04 -2.00367859 5.101487e-02 ## pref東京都:year -2.338547e-04 7.729007e-04 -0.30256756 7.635834e-01 ## pref栃木県:year -1.632796e-03 6.269039e-05 -26.04539636 3.517850e-29 ## pref沖縄県:year -4.421173e-05 3.426818e-04 -0.12901685 8.979068e-01 ## pref滋賀県:year -7.991731e-04 9.387049e-05 -8.51357175 5.234315e-11 ## pref熊本県:year -1.746277e-03 6.820316e-05 -25.60404923 7.347324e-29 ## pref石川県:year 3.479122e-05 6.635606e-04 0.05243112 9.584122e-01 ## pref神奈川県:year 4.399746e-04 8.175846e-05 5.38139577 2.419722e-06 ## pref福井県:year -1.519713e-03 9.530303e-04 -1.59461184 1.176477e-01 ## pref福岡県:year -5.910875e-04 2.895411e-04 -2.04146347 4.696474e-02 ## pref福島県:year -5.359968e-03 2.700037e-04 -19.85146155 3.414406e-24 ## pref秋田県:year -6.234947e-04 1.459698e-03 -0.42713947 6.712705e-01 ## pref群馬県:year 2.554465e-03 6.348100e-04 4.02398309 2.113878e-04 ## pref茨城県:year -6.014168e-04 3.371727e-04 -1.78370522 8.106941e-02 ## pref長崎県:year 5.083915e-04 6.835363e-04 0.74376677 4.608000e-01 ## pref長野県:year -9.269502e-04 5.525346e-04 -1.67763279 1.002018e-01 ## pref青森県:year 9.522157e-04 1.070143e-03 0.88980216 3.782022e-01 ## pref静岡県:year -5.695088e-04 1.940567e-04 -2.93475524 5.193745e-03 ## pref香川県:year 3.020400e-04 1.086500e-04 2.77993665 7.850358e-03 ## pref高知県:year -3.589389e-03 1.097551e-04 -32.70361670 1.691800e-33 ## pref鳥取県:year -6.801584e-04 3.858225e-04 -1.76287871 8.456361e-02 ## pref鹿児島県:year 1.115343e-03 1.334348e-04 8.35871307 8.801002e-11 ## CI Lower CI Upper DF ## (Intercept) NA NA NA ## cap.rate -2.530707e-01 4.361225e-01 46 ## pref京都府 -3.471847e+00 -2.272076e+00 46 ## pref佐賀県 1.266234e-01 4.308868e+00 46 ## pref兵庫県 -2.297474e+00 -1.050788e+00 46 ## pref北海道 -2.775944e+00 -1.278431e+00 46 ## pref千葉県 -6.492466e-01 2.666352e+00 46 ## pref和歌山県 -6.442569e+00 1.592339e+00 46 ## pref埼玉県 -3.676978e+00 -2.732910e+00 46 ## pref大分県 -2.103809e-01 2.205282e-01 46 ## pref大阪府 -4.710436e+00 -2.378895e+00 46 ## pref奈良県 -3.186359e+00 -2.265953e+00 46 ## pref宮城県 6.049896e+00 7.240432e+00 46 ## pref宮崎県 7.344395e-01 1.022992e+00 46 ## pref富山県 -3.434369e+00 4.673598e+00 46 ## pref山口県 1.014139e+00 2.098824e+00 46 ## pref山形県 1.016729e+01 1.508211e+01 46 ## pref山梨県 -3.062114e+00 5.111980e+00 46 ## pref岐阜県 7.752198e-01 2.868865e+00 46 ## pref岡山県 -5.650786e-01 2.619859e+00 46 ## pref岩手県 -4.950360e-01 8.176369e+00 46 ## pref島根県 -1.021285e+01 5.301078e+00 46 ## pref広島県 6.398469e-01 1.856764e+00 46 ## pref徳島県 6.165411e-01 2.898577e+00 46 ## pref愛媛県 -2.045419e+00 1.164468e+00 46 ## pref愛知県 -1.138835e+00 1.794511e+00 46 ## pref新潟県 6.114970e-01 6.344217e+00 46 ## pref東京都 -2.470251e+00 3.937931e+00 46 ## pref栃木県 3.448008e+00 3.802641e+00 46 ## pref沖縄県 -8.104496e-01 1.790428e+00 46 ## pref滋賀県 1.433618e+00 2.367335e+00 46 ## pref熊本県 3.510841e+00 4.343486e+00 46 ## pref石川県 -2.093917e+00 2.875967e+00 46 ## pref神奈川県 -1.039923e+00 -2.868958e-01 46 ## pref福井県 -1.360665e-01 7.205771e+00 46 ## pref福岡県 2.266495e-01 2.768843e+00 46 ## pref福島県 1.015014e+01 1.219739e+01 46 ## pref秋田県 -4.026190e+00 7.491013e+00 46 ## pref群馬県 -7.231176e+00 -2.325017e+00 46 ## pref茨城県 2.381589e-01 2.814289e+00 46 ## pref長崎県 -3.257753e+00 2.015710e+00 46 ## pref長野県 1.223817e-01 4.263004e+00 46 ## pref青森県 -5.646773e+00 2.689293e+00 46 ## pref静岡県 6.171773e-01 2.320687e+00 46 ## pref香川県 -5.535006e-01 8.714723e-02 46 ## pref高知県 7.006937e+00 8.294129e+00 46 ## pref鳥取県 4.608246e-01 3.230121e+00 46 ## pref鹿児島県 -2.516006e+00 -1.239507e+00 46 ## factor(year)2005 2.523893e-02 4.718112e-02 46 ## factor(year)2010 5.067118e-02 9.868630e-02 46 ## pref三重県:year 1.035570e-04 2.254184e-04 46 ## pref京都府:year 1.336830e-03 1.822425e-03 46 ## pref佐賀県:year -1.994513e-03 2.137430e-04 46 ## pref兵庫県:year 6.817221e-04 1.230324e-03 46 ## pref北海道:year 8.087709e-04 1.484482e-03 46 ## pref千葉県:year -1.176615e-03 4.141805e-04 46 ## pref和歌山県:year -7.292608e-04 3.421163e-03 46 ## pref埼玉県:year 1.514073e-03 1.932629e-03 46 ## pref大分県:year 1.181271e-04 2.349780e-04 46 ## pref大阪府:year 1.260329e-03 2.500572e-03 46 ## pref奈良県:year 1.193258e-03 1.747238e-03 46 ## pref宮城県:year -3.468862e-03 -2.816904e-03 46 ## pref宮崎県:year -3.620999e-04 -8.161295e-05 46 ## pref富山県:year -2.177745e-03 2.036520e-03 46 ## pref山口県:year -8.306974e-04 -3.964733e-04 46 ## pref山形県:year -7.295515e-03 -4.745629e-03 46 ## pref山梨県:year -2.445842e-03 1.773053e-03 46 ## pref岐阜県:year -1.332192e-03 -1.653302e-04 46 ## pref岡山県:year -1.187790e-03 5.103456e-04 46 ## pref岩手県:year -3.909419e-03 5.278429e-04 46 ## pref島根県:year -2.471051e-03 5.422485e-03 46 ## pref広島県:year -8.226808e-04 -1.048970e-04 46 ## pref徳島県:year -1.312870e-03 -4.613879e-05 46 ## pref愛媛県:year -3.687961e-04 1.121181e-03 46 ## pref愛知県:year -7.048610e-04 6.534223e-04 46 ## pref新潟県:year -3.013436e-03 6.915061e-06 46 ## pref東京都:year -1.789623e-03 1.321914e-03 46 ## pref栃木県:year -1.758985e-03 -1.506607e-03 46 ## pref沖縄県:year -7.339945e-04 6.455710e-04 46 ## pref滋賀県:year -9.881246e-04 -6.102217e-04 46 ## pref熊本県:year -1.883563e-03 -1.608991e-03 46 ## pref石川県:year -1.300887e-03 1.370469e-03 46 ## pref神奈川県:year 2.754034e-04 6.045459e-04 46 ## pref福井県:year -3.438064e-03 3.986371e-04 46 ## pref福岡県:year -1.173903e-03 -8.271570e-06 46 ## pref福島県:year -5.903457e-03 -4.816479e-03 46 ## pref秋田県:year -3.561715e-03 2.314725e-03 46 ## pref群馬県:year 1.276658e-03 3.832271e-03 46 ## pref茨城県:year -1.280110e-03 7.727675e-05 46 ## pref長崎県:year -8.674956e-04 1.884279e-03 46 ## pref長野県:year -2.039145e-03 1.852443e-04 46 ## pref青森県:year -1.201871e-03 3.106302e-03 46 ## pref静岡県:year -9.601246e-04 -1.788930e-04 46 ## pref香川県:year 8.333897e-05 5.207410e-04 46 ## pref高知県:year -3.810314e-03 -3.368463e-03 46 ## pref鳥取県:year -1.456779e-03 9.646215e-05 46 ## pref鹿児島県:year 8.467530e-04 1.383934e-03 46 feols(emp.rate ~ cap.rate + i(pref) + i(year) + i(pref, year), vcov = ~pref, data = yamaguchi) ## The variable &#39;pref::鹿児島県:year&#39; has been removed because of collinearity (see $collin.var). ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.230687 0.266870 8.358713 8.8010e-11 *** ## cap.rate 0.091526 0.171194 0.534631 5.9548e-01 ## pref::京都府 -2.871962 0.298021 -9.636775 1.3026e-12 *** ## pref::佐賀県 2.217746 1.038863 2.134782 3.8139e-02 * ## pref::兵庫県 -1.674131 0.309675 -5.406097 2.2244e-06 *** ## pref::北海道 -2.027188 0.371980 -5.449725 1.9169e-06 *** ## pref::千葉県 1.008553 0.823589 1.224582 2.2697e-01 ## pref::和歌山県 -2.425115 1.995858 -1.215074 2.3054e-01 ## ... 88 coefficients remaining (display them with summary() or use argument n) ## ... 1 variable was removed because of collinearity (pref::鹿児島県:year) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.002324 Adj. R2: 0.998209 # 係数の大きさは正しく, 速度も速い (はず) だが標準誤差が異なる. # feols(emp.rate ~ cap.rate | pref + year + pref[year], vcov = ~pref, data = yamaguchi) 表6-3 記述統計量 第5章の表5-5と同様にdatasummary()を用いてデータフレームを書き出し, 適宜リネームを行えばよい. # 変数を選択 vars &lt;- yamaguchi %&gt;% select(emp.rate, cap.rate, age, age.hus, emp.rate.hus, urate) table63 &lt;- datasummary(All(vars) ~ N + Mean + SD + Min + Max, output = &quot;data.frame&quot;, data = yamaguchi, fmt = 3) # 列名 colnames(table63) &lt;- c(&quot;変数&quot;, &quot;サンプルサイズ&quot;, &quot;平均&quot;, &quot;標準偏差&quot;, &quot;最小値&quot;, &quot;最大値&quot;) # 変数名 table63[,1] &lt;- c(&quot;母親就業率&quot;, &quot;保育所定員率&quot;, &quot;母親平均年齢&quot;, &quot;父親平均年齢&quot;, &quot;父親就業率&quot;, &quot;失業率&quot;) # 表を出力 gt(table63) #nzsisdgdjy table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #nzsisdgdjy thead, #nzsisdgdjy tbody, #nzsisdgdjy tfoot, #nzsisdgdjy tr, #nzsisdgdjy td, #nzsisdgdjy th { border-style: none; } #nzsisdgdjy p { margin: 0; padding: 0; } #nzsisdgdjy .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #nzsisdgdjy .gt_caption { padding-top: 4px; padding-bottom: 4px; } #nzsisdgdjy .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #nzsisdgdjy .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #nzsisdgdjy .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nzsisdgdjy .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nzsisdgdjy .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nzsisdgdjy .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #nzsisdgdjy .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #nzsisdgdjy .gt_column_spanner_outer:first-child { padding-left: 0; } #nzsisdgdjy .gt_column_spanner_outer:last-child { padding-right: 0; } #nzsisdgdjy .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #nzsisdgdjy .gt_spanner_row { border-bottom-style: hidden; } #nzsisdgdjy .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #nzsisdgdjy .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #nzsisdgdjy .gt_from_md > :first-child { margin-top: 0; } #nzsisdgdjy .gt_from_md > :last-child { margin-bottom: 0; } #nzsisdgdjy .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #nzsisdgdjy .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #nzsisdgdjy .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #nzsisdgdjy .gt_row_group_first td { border-top-width: 2px; } #nzsisdgdjy .gt_row_group_first th { border-top-width: 2px; } #nzsisdgdjy .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nzsisdgdjy .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #nzsisdgdjy .gt_first_summary_row.thick { border-top-width: 2px; } #nzsisdgdjy .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nzsisdgdjy .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nzsisdgdjy .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #nzsisdgdjy .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #nzsisdgdjy .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #nzsisdgdjy .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nzsisdgdjy .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nzsisdgdjy .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nzsisdgdjy .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nzsisdgdjy .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nzsisdgdjy .gt_left { text-align: left; } #nzsisdgdjy .gt_center { text-align: center; } #nzsisdgdjy .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #nzsisdgdjy .gt_font_normal { font-weight: normal; } #nzsisdgdjy .gt_font_bold { font-weight: bold; } #nzsisdgdjy .gt_font_italic { font-style: italic; } #nzsisdgdjy .gt_super { font-size: 65%; } #nzsisdgdjy .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #nzsisdgdjy .gt_asterisk { font-size: 100%; vertical-align: 0; } #nzsisdgdjy .gt_indent_1 { text-indent: 5px; } #nzsisdgdjy .gt_indent_2 { text-indent: 10px; } #nzsisdgdjy .gt_indent_3 { text-indent: 15px; } #nzsisdgdjy .gt_indent_4 { text-indent: 20px; } #nzsisdgdjy .gt_indent_5 { text-indent: 25px; } #nzsisdgdjy .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #nzsisdgdjy div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } 変数 サンプルサイズ 平均 標準偏差 最小値 最大値 母親就業率 141 0.431 0.097 0.229 0.640 保育所定員率 141 0.363 0.115 0.138 0.655 母親平均年齢 141 32.730 0.670 31.490 34.764 父親平均年齢 141 34.834 0.531 33.877 36.859 父親就業率 141 0.965 0.018 0.878 0.989 失業率 141 0.057 0.015 0.030 0.119 表6-4 年ごとの記述統計量 やはりdatasummary()を用いる. formula引数を適宜変更するだけで容易に作成できる. # 変数を選択 table64 &lt;- datasummary(emp.rate * (Mean + SD) + cap.rate * (Mean + SD) ~ factor(year), output = &quot;data.frame&quot;, data = yamaguchi, fmt = 3) # 列名 colnames(table64) &lt;- c(&quot; &quot;, &quot;変数&quot;, &quot;2000&quot;, &quot;2005&quot;, &quot;2010&quot;) # tibbleの都合上1列目は空白1文字とする # 変数名 table64[,1] &lt;- c(&quot;母親就業率&quot;, &quot;&quot;, &quot;保育所定員率&quot;, &quot;&quot;) # 統計量を日本語に直す table64[,2] &lt;- c(&quot;平均&quot;, &quot;標準偏差&quot;, &quot;平均&quot;, &quot;標準偏差&quot;) # 表を出力 gt(table64) #qojbruziep table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #qojbruziep thead, #qojbruziep tbody, #qojbruziep tfoot, #qojbruziep tr, #qojbruziep td, #qojbruziep th { border-style: none; } #qojbruziep p { margin: 0; padding: 0; } #qojbruziep .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #qojbruziep .gt_caption { padding-top: 4px; padding-bottom: 4px; } #qojbruziep .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #qojbruziep .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #qojbruziep .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qojbruziep .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qojbruziep .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qojbruziep .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #qojbruziep .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #qojbruziep .gt_column_spanner_outer:first-child { padding-left: 0; } #qojbruziep .gt_column_spanner_outer:last-child { padding-right: 0; } #qojbruziep .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #qojbruziep .gt_spanner_row { border-bottom-style: hidden; } #qojbruziep .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #qojbruziep .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #qojbruziep .gt_from_md > :first-child { margin-top: 0; } #qojbruziep .gt_from_md > :last-child { margin-bottom: 0; } #qojbruziep .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #qojbruziep .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #qojbruziep .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #qojbruziep .gt_row_group_first td { border-top-width: 2px; } #qojbruziep .gt_row_group_first th { border-top-width: 2px; } #qojbruziep .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qojbruziep .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #qojbruziep .gt_first_summary_row.thick { border-top-width: 2px; } #qojbruziep .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qojbruziep .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qojbruziep .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #qojbruziep .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #qojbruziep .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #qojbruziep .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qojbruziep .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qojbruziep .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #qojbruziep .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qojbruziep .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #qojbruziep .gt_left { text-align: left; } #qojbruziep .gt_center { text-align: center; } #qojbruziep .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #qojbruziep .gt_font_normal { font-weight: normal; } #qojbruziep .gt_font_bold { font-weight: bold; } #qojbruziep .gt_font_italic { font-style: italic; } #qojbruziep .gt_super { font-size: 65%; } #qojbruziep .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #qojbruziep .gt_asterisk { font-size: 100%; vertical-align: 0; } #qojbruziep .gt_indent_1 { text-indent: 5px; } #qojbruziep .gt_indent_2 { text-indent: 10px; } #qojbruziep .gt_indent_3 { text-indent: 15px; } #qojbruziep .gt_indent_4 { text-indent: 20px; } #qojbruziep .gt_indent_5 { text-indent: 25px; } #qojbruziep .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #qojbruziep div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } 変数 2000 2005 2010 母親就業率 平均 0.392 0.430 0.471 標準偏差 0.096 0.091 0.090 保育所定員率 平均 0.320 0.361 0.407 標準偏差 0.102 0.110 0.119 表6-5 推定結果 fixest::esttable()を使うとfeols()の推定結果を容易に表に出力できる. それぞれのモデルについて, 固定効果の有無なども自動で記載されるため, 非常に強力である. ただし, 上に記した通り都道府県効果prefをformulaに加えるのではなく, パイプの後ろに固定効果として指定するとStataとは異なる標準誤差が出力される. このため下の表のモデル(2), (4), (6)の標準誤差は教科書の表とは異なっている. また, 表示の都合上esttable()が出力したデータフレームを直接編集している. models_65 &lt;- list(&quot;(1)&quot; = feols(emp.rate ~ cap.rate, vcov = ~pref, data = yamaguchi), &quot;(2)&quot; = feols(emp.rate ~ cap.rate | pref, cluster = ~pref, data = yamaguchi), &quot;(3)&quot; = feols(emp.rate ~ cap.rate | year, cluster = ~pref, data = yamaguchi), &quot;(4)&quot; = feols(emp.rate ~ cap.rate | pref + year, cluster = ~pref, data = yamaguchi), &quot;(5)&quot; = feols(emp.rate ~ cap.rate + age + age.hus + emp.rate.hus + urate | year, cluster = ~pref, data = yamaguchi), &quot;(6)&quot; = feols(emp.rate ~ cap.rate + age + age.hus + emp.rate.hus + urate | pref + year, cluster = ~pref, data = yamaguchi)) keep = &quot;%cap.rate|age|age.hus|emp.rate.hus|urate&quot; dict = c(&quot;cap.rate&quot; = &quot;保育所定員率&quot;, &quot;age&quot; = &quot;母親平均年齢&quot;, &quot;age.hus&quot; = &quot;父親平均年齢&quot;, &quot;emp.rate.hus&quot; = &quot;父親就業率&quot;, &quot;urate&quot; = &quot;失業率&quot;, &quot;pref&quot; = &quot;都道府県効果&quot;, &quot;year&quot; = &quot;年効果&quot;) # 結果表をデータフレームで出力 table_65 &lt;- esttable(models_65, keep = keep, dict = dict, depvar = FALSE, digits = 3, digits.stats = 3, fitstat = ~ ar2 + n, se.below = TRUE) # tibbleの都合上1列目の列名を空白1文字とする colnames(table_65)[1] &lt;- &quot; &quot; # gtで出力. データフレームの14行目 (下線) と15行目 (標準誤差が都道府県クラスター構造に頑健である旨) を削除 gt(table_65[-c(14, 15), ]) #cuguykvkuh table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #cuguykvkuh thead, #cuguykvkuh tbody, #cuguykvkuh tfoot, #cuguykvkuh tr, #cuguykvkuh td, #cuguykvkuh th { border-style: none; } #cuguykvkuh p { margin: 0; padding: 0; } #cuguykvkuh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #cuguykvkuh .gt_caption { padding-top: 4px; padding-bottom: 4px; } #cuguykvkuh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #cuguykvkuh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #cuguykvkuh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cuguykvkuh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cuguykvkuh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cuguykvkuh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #cuguykvkuh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #cuguykvkuh .gt_column_spanner_outer:first-child { padding-left: 0; } #cuguykvkuh .gt_column_spanner_outer:last-child { padding-right: 0; } #cuguykvkuh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #cuguykvkuh .gt_spanner_row { border-bottom-style: hidden; } #cuguykvkuh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #cuguykvkuh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #cuguykvkuh .gt_from_md > :first-child { margin-top: 0; } #cuguykvkuh .gt_from_md > :last-child { margin-bottom: 0; } #cuguykvkuh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #cuguykvkuh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #cuguykvkuh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #cuguykvkuh .gt_row_group_first td { border-top-width: 2px; } #cuguykvkuh .gt_row_group_first th { border-top-width: 2px; } #cuguykvkuh .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cuguykvkuh .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #cuguykvkuh .gt_first_summary_row.thick { border-top-width: 2px; } #cuguykvkuh .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cuguykvkuh .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cuguykvkuh .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #cuguykvkuh .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #cuguykvkuh .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #cuguykvkuh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cuguykvkuh .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cuguykvkuh .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cuguykvkuh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cuguykvkuh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cuguykvkuh .gt_left { text-align: left; } #cuguykvkuh .gt_center { text-align: center; } #cuguykvkuh .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cuguykvkuh .gt_font_normal { font-weight: normal; } #cuguykvkuh .gt_font_bold { font-weight: bold; } #cuguykvkuh .gt_font_italic { font-style: italic; } #cuguykvkuh .gt_super { font-size: 65%; } #cuguykvkuh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #cuguykvkuh .gt_asterisk { font-size: 100%; vertical-align: 0; } #cuguykvkuh .gt_indent_1 { text-indent: 5px; } #cuguykvkuh .gt_indent_2 { text-indent: 10px; } #cuguykvkuh .gt_indent_3 { text-indent: 15px; } #cuguykvkuh .gt_indent_4 { text-indent: 20px; } #cuguykvkuh .gt_indent_5 { text-indent: 25px; } #cuguykvkuh .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #cuguykvkuh div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } (1) (2) (3) (4) (5) (6) 保育所定員率 0.615*** 0.805*** 0.585*** 0.090 0.535*** 0.114 (0.067) (0.045) (0.073) (0.060) (0.068) (0.059) 母親平均年齢 -0.004 -0.027 (0.093) (0.027) 父親平均年齢 -0.051 0.041 (0.081) (0.027) 父親就業率 0.065 0.311* (0.440) (0.128) 失業率 -0.205 -0.661** (1.05) (0.245) Fixed-Effects: --------- --------- --------- -------- --------- -------- 都道府県効果 No Yes No Yes No Yes 年効果 No No Yes Yes Yes Yes Adj. R2 0.530 0.975 0.536 0.992 0.567 0.994 Observations 141 141 141 141 141 141 練習問題 6-10 [実証] 表6-5を参照せよ. この問題では, クラスター構造に頑健な標準誤差がStataでの出力と同じになるように, prefをformulaに加える. 1つめの式ではクラスター構造に頑健な標準誤差を, 2つめでは不均一分散に頑健な標準誤差を指定している. 結果を比較すると, 後者では標準誤差が小さくなっており, より係数が有意になりやすいことがわかる. # クラスター構造に頑健な標準誤差 feols(emp.rate ~ cap.rate + age + age.hus + emp.rate.hus + urate + pref | year, cluster = ~pref, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Fixed-effects: year: 3 ## Standard-errors: Clustered (pref) ## Estimate Std. Error t value Pr(&gt;|t|) ## cap.rate 0.114025 0.073138 1.559034 1.2584e-01 ## age -0.026613 0.033927 -0.784428 4.3681e-01 ## age.hus 0.040877 0.033406 1.223633 2.2732e-01 ## emp.rate.hus 0.311072 0.157654 1.973137 5.4506e-02 . ## urate -0.661263 0.303327 -2.180030 3.4410e-02 * ## pref京都府 -0.029676 0.008433 -3.519164 9.8761e-04 *** ## pref佐賀県 0.110860 0.004697 23.601944 &lt; 2.2e-16 *** ## pref兵庫県 -0.072914 0.013321 -5.473527 1.7673e-06 *** ## ... 43 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.006095 Adj. R2: 0.993628 ## Within R2: 0.995548 # 不均一分散に頑健な標準誤差 feols(emp.rate ~ cap.rate + age + age.hus + emp.rate.hus + urate + pref | year, vcov = &quot;HC1&quot;, data = yamaguchi) ## OLS estimation, Dep. Var.: emp.rate ## Observations: 141 ## Fixed-effects: year: 3 ## Standard-errors: Heteroskedasticity-robust ## Estimate Std. Error t value Pr(&gt;|t|) ## cap.rate 0.114025 0.054071 2.108803 3.7836e-02 * ## age -0.026613 0.027364 -0.972575 3.3346e-01 ## age.hus 0.040877 0.026572 1.538379 1.2759e-01 ## emp.rate.hus 0.311072 0.119656 2.599725 1.0960e-02 * ## urate -0.661263 0.252404 -2.619855 1.0379e-02 * ## pref京都府 -0.029676 0.007018 -4.228551 5.7908e-05 *** ## pref佐賀県 0.110860 0.004351 25.480523 &lt; 2.2e-16 *** ## pref兵庫県 -0.072914 0.010557 -6.906876 7.7402e-10 *** ## ... 43 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 0.006095 Adj. R2: 0.993628 ## Within R2: 0.995548 feols()で推定したモデルをr2()に渡して実行することで, そのモデルの様々な決定係数を得ることができる. 特に, 固定効果推定の全体での自由度修正済み決定係数はar2 (aは”adjusted”を示す), 個体内変動に基づく自由度修正済み決定係数はwar2 (wは”within”)の欄を見ればよい. これら2つの値は12%ほど異なり, 後者のほうが小さいことがわかる. feols(emp.rate ~ cap.rate | pref, cluster = ~pref, data = yamaguchi) %&gt;% r2() ## cor2 r2 ar2 pr2 apr2 wr2 war2 ## 0.9836397 0.9836397 0.9753715 -2.2459907 -1.8819340 0.8590344 0.8575186 ## wpr2 wapr2 ## -0.4916692 -0.4881097 前問と同様にする. 前者の決定係数ではほぼ1近いのに対し, 後者はたった2.8%に過ぎないことがわかる. feols(emp.rate ~ cap.rate | pref + year, cluster = ~pref, data = yamaguchi) %&gt;% r2() ## cor2 r2 ar2 pr2 apr2 wr2 ## 0.994616477 0.994616477 0.991717656 -2.852973160 -2.473424718 0.027756337 ## war2 wpr2 wapr2 ## 0.017072341 -0.004005536 -0.001987117 練習問題 6-11 [実証] まずはデータを読み込む. timss &lt;- read_dta(&quot;data/06_第6章/timss.dta&quot;) lm_robust()では, clusters = idschool, se_type = \"stata\"とすればよい. 一方でfeols()では, cluster引数にidschoolを指定すればクラスター構造に頑健な標準誤差が得られる. lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4, clusters = idschool, se_type = &quot;stata&quot;, data = timss) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) 150.3634168 0.4695780 320.2096684 1.092624e-203 149.4350933 ## agese_q2 0.1742963 0.4375446 0.3983509 6.909741e-01 -0.6906994 ## agese_q3 -0.3462258 0.4578970 -0.7561216 4.508377e-01 -1.2514569 ## agese_q4 -1.5581051 0.4423772 -3.5221192 5.772791e-04 -2.4326544 ## CI Upper DF ## (Intercept) 151.2917404 141 ## agese_q2 1.0392919 141 ## agese_q3 0.5590053 141 ## agese_q4 -0.6835557 141 feols(mathscore ~ agese_q2 + agese_q3 + agese_q4, cluster = ~ idschool, data = timss) ## OLS estimation, Dep. Var.: mathscore ## Observations: 4,536 ## Standard-errors: Clustered (idschool) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 150.363417 0.469578 320.209668 &lt; 2.2e-16 *** ## agese_q2 0.174296 0.437545 0.398351 0.69097411 ## agese_q3 -0.346226 0.457897 -0.756122 0.45083772 ## agese_q4 -1.558105 0.442377 -3.522119 0.00057728 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 9.90955 Adj. R2: 0.00378 feols()では上述の通りパイプ|の後ろに固定効果変数を追加するとStataとは異なる標準誤差を得る. 下の例では代わりにformula中に直接固定効果変数を追加することで, Stataと同等の標準誤差を得られた. lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4, fixed_effects = idschool, clusters = idschool, se_type = &quot;stata&quot;, data = timss) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper ## agese_q2 0.1458291 0.4178663 0.3489852 0.7276210466 -0.6802639 0.9719222 ## agese_q3 -0.4090921 0.4517316 -0.9056088 0.3666878222 -1.3021345 0.4839503 ## agese_q4 -1.4240215 0.4135541 -3.4433743 0.0007566893 -2.2415895 -0.6064534 ## DF ## agese_q2 141 ## agese_q3 141 ## agese_q4 141 feols(mathscore ~ agese_q2 + agese_q3 + agese_q4 + factor(idschool), cluster = ~ idschool, data = timss) ## OLS estimation, Dep. Var.: mathscore ## Observations: 4,536 ## Standard-errors: Clustered (idschool) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 152.075272 0.271515 560.098853 &lt; 2.2e-16 *** ## agese_q2 0.145829 0.417866 0.348985 0.72762105 ## agese_q3 -0.409092 0.451732 -0.905609 0.36668782 ## agese_q4 -1.424021 0.413554 -3.443374 0.00075669 *** ## factor(idschool)2 -0.395631 0.019829 -19.952252 &lt; 2.2e-16 *** ## factor(idschool)3 -3.670083 0.048345 -75.915192 &lt; 2.2e-16 *** ## factor(idschool)4 -1.488299 0.023013 -64.671465 &lt; 2.2e-16 *** ## factor(idschool)5 0.621102 0.055966 11.097876 &lt; 2.2e-16 *** ## ... 137 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 9.13991 Adj. R2: 0.125303 前章の練習問題5-15 (d)で推定したモデルについて, クラスター構造に頑健な標準誤差を求める. lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, clusters = idschool, data = timss, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) 146.79775016 0.8550353 171.68618633 1.269793e-165 145.1074039 ## agese_q2 0.21758161 0.4077706 0.53358827 5.944666e-01 -0.5885529 ## agese_q3 -0.46008503 0.4246048 -1.08356058 2.804091e-01 -1.2994996 ## agese_q4 -1.33572852 0.4024301 -3.31915634 1.149204e-03 -2.1313053 ## comu_1 1.89427862 0.6814924 2.77960343 6.185559e-03 0.5470148 ## comu_2 1.43919896 0.4257504 3.38038211 9.365940e-04 0.5975196 ## comu_3 0.05791885 0.7038745 0.08228576 9.345362e-01 -1.3335929 ## comu_4 0.76623098 0.4864055 1.57529266 1.174300e-01 -0.1953593 ## comu_5 1.55246234 1.0611039 1.46306348 1.456756e-01 -0.5452673 ## computer 2.48778703 0.3973480 6.26097814 4.332497e-09 1.7022573 ## numpeople -0.23975373 0.1087898 -2.20382479 2.915881e-02 -0.4548238 ## mothereduc_1 -2.73521340 0.9237553 -2.96097179 3.599380e-03 -4.5614144 ## mothereduc_2 -0.32542923 0.4597539 -0.70783350 4.802171e-01 -1.2343313 ## mothereduc_3 1.67462212 0.4724270 3.54472120 5.337006e-04 0.7406662 ## mothereduc_4 2.39516176 0.6490408 3.69031022 3.191428e-04 1.1120526 ## mothereduc_5 -1.37821743 2.3276215 -0.59211407 5.547225e-01 -5.9797657 ## fathereduc_1 -2.58790917 0.8562245 -3.02246553 2.978836e-03 -4.2806064 ## fathereduc_2 -0.32780040 0.4118255 -0.79596915 4.273880e-01 -1.1419512 ## fathereduc_3 0.20087590 0.7067773 0.28421385 7.766635e-01 -1.1963744 ## fathereduc_4 3.13269081 0.4727437 6.62661627 6.735789e-10 2.1981090 ## fathereduc_5 6.59377558 1.4705261 4.48395677 1.506130e-05 3.6866462 ## CI Upper DF ## (Intercept) 148.48809637 141 ## agese_q2 1.02371615 141 ## agese_q3 0.37932958 141 ## agese_q4 -0.54015172 141 ## comu_1 3.24154241 141 ## comu_2 2.28087828 141 ## comu_3 1.44943061 141 ## comu_4 1.72782129 141 ## comu_5 3.65019203 141 ## computer 3.27331677 141 ## numpeople -0.02468368 141 ## mothereduc_1 -0.90901245 141 ## mothereduc_2 0.58347279 141 ## mothereduc_3 2.60857799 141 ## mothereduc_4 3.67827088 141 ## mothereduc_5 3.22333080 141 ## fathereduc_1 -0.89521191 141 ## fathereduc_2 0.48635041 141 ## fathereduc_3 1.59812619 141 ## fathereduc_4 4.06727264 141 ## fathereduc_5 9.50090498 141 feols(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, cluster = ~idschool, data = timss) ## OLS estimation, Dep. Var.: mathscore ## Observations: 4,536 ## Standard-errors: Clustered (idschool) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 146.797750 0.855035 171.686186 &lt; 2.2e-16 *** ## agese_q2 0.217582 0.407771 0.533588 0.59446657 ## agese_q3 -0.460085 0.424605 -1.083561 0.28040909 ## agese_q4 -1.335729 0.402430 -3.319156 0.00114920 ** ## comu_1 1.894279 0.681492 2.779603 0.00618556 ** ## comu_2 1.439199 0.425750 3.380382 0.00093659 *** ## comu_3 0.057919 0.703875 0.082286 0.93453617 ## comu_4 0.766231 0.486405 1.575293 0.11743000 ## ... 13 coefficients remaining (display them with summary() or use argument n) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 9.4301 Adj. R2: 0.094451 [参考] 上の処理では, fixestパッケージの高速さが感じられた. 参考までに, microbenchmarkパッケージを用いたベンチマークによる比較を下に示す2. # install.packages(&quot;microbenchmark&quot;) mbm &lt;- microbenchmark::microbenchmark( lm_robust = lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, clusters = idschool, data = timss, se_type = &quot;stata&quot;), fixest = feols(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, cluster = ~idschool, data = timss) ) autoplot(mbm) 同様に, idschoolを固定変数として推定を行う. feols()ではfactor(idschool)をformula中に追加することで, Stataと同じ標準誤差が得られた. lm_robust(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5, fixed_effects = idschool, clusters = idschool, data = timss, se_type = &quot;stata&quot;) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## agese_q2 0.13102743 0.4009247 0.32681307 7.442939e-01 -0.6615732 ## agese_q3 -0.47028802 0.4378613 -1.07405713 2.846317e-01 -1.3359098 ## agese_q4 -1.30272417 0.3965057 -3.28551158 1.284450e-03 -2.0865888 ## comu_1 NA NA NA NA NA ## comu_2 NA NA NA NA NA ## comu_3 NA NA NA NA NA ## comu_4 NA NA NA NA NA ## comu_5 NA NA NA NA NA ## computer 2.24636387 0.4086659 5.49682209 1.759051e-07 1.4384593 ## numpeople -0.15201323 0.1103651 -1.37736644 1.705815e-01 -0.3701975 ## mothereduc_1 -2.19861513 0.8822008 -2.49219362 1.385377e-02 -3.9426656 ## mothereduc_2 0.06124274 0.4413379 0.13876612 8.898330e-01 -0.8112520 ## mothereduc_3 1.77605577 0.4801400 3.69903765 3.093103e-04 0.8268520 ## mothereduc_4 1.90018375 0.5000938 3.79965506 2.148144e-04 0.9115327 ## mothereduc_5 -2.57015264 2.2191145 -1.15818837 2.487451e-01 -6.9571900 ## fathereduc_1 -2.31824085 0.8097549 -2.86289195 4.838822e-03 -3.9190708 ## fathereduc_2 -0.15378290 0.3934094 -0.39089784 6.964628e-01 -0.9315264 ## fathereduc_3 -0.01503236 0.6991735 -0.02150018 9.828771e-01 -1.3972505 ## fathereduc_4 2.60467908 0.4369355 5.96124430 1.911816e-08 1.7408876 ## fathereduc_5 4.50537704 0.9819114 4.58837427 9.781806e-06 2.5642055 ## CI Upper DF ## agese_q2 0.92362811 141 ## agese_q3 0.39533371 141 ## agese_q4 -0.51885951 141 ## comu_1 NA NA ## comu_2 NA NA ## comu_3 NA NA ## comu_4 NA NA ## comu_5 NA NA ## computer 3.05426840 141 ## numpeople 0.06617108 141 ## mothereduc_1 -0.45456465 141 ## mothereduc_2 0.93373748 141 ## mothereduc_3 2.72525957 141 ## mothereduc_4 2.88883483 141 ## mothereduc_5 1.81688474 141 ## fathereduc_1 -0.71741085 141 ## fathereduc_2 0.62396061 141 ## fathereduc_3 1.36718580 141 ## fathereduc_4 3.46847057 141 ## fathereduc_5 6.44654863 141 feols(mathscore ~ agese_q2 + agese_q3 + agese_q4 + comu_1 + comu_2 + comu_3 + comu_4 + comu_5 + computer + numpeople + mothereduc_1 + mothereduc_2 + mothereduc_3 + mothereduc_4 + mothereduc_5 + fathereduc_1 + fathereduc_2 + fathereduc_3 + fathereduc_4 + fathereduc_5 + factor(idschool), cluster = ~idschool, data = timss) ## OLS estimation, Dep. Var.: mathscore ## Observations: 4,536 ## Standard-errors: Clustered (idschool) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 146.269029 0.829988 176.230282 &lt; 2.2e-16 *** ## agese_q2 0.131027 0.400925 0.326813 7.4429e-01 ## agese_q3 -0.470288 0.437861 -1.074057 2.8463e-01 ## agese_q4 -1.302724 0.396506 -3.285512 1.2844e-03 ** ## comu_1 2.325141 0.320573 7.253087 2.4756e-11 *** ## comu_2 6.840035 0.293296 23.321286 &lt; 2.2e-16 *** ## comu_3 -3.958029 0.163114 -24.265472 &lt; 2.2e-16 *** ## comu_4 -2.891447 0.215360 -13.426114 &lt; 2.2e-16 *** ## ... 149 coefficients remaining (display them with summary() or use argument n) ## ... 5 variables were removed because of collinearity (factor(idschool)119, factor(idschool)138 and 3 others [full set in $collin.var]) ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## RMSE: 8.86646 Adj. R2: 0.174603 練習問題5-15(a)と, (1)で求めたモデルを比較すると, 係数の大きさは同じである一方, 標準誤差については後者 (クラスター構造に頑健な標準誤差) のほうが大きくなった. しかし, その差はそれほど大きくなく, 早生まれの人の成績が有意に低いという主張に変わりはなかった. (2)にて学校効果をモデルに組み込むと, 早生まれの人を示すダミー変数の係数はわずかに小さくなったが, やはり有意性に変わりはなかった. 練習問題5-15(d)と, (3)で求めたモデルを比較すると, 標準誤差が後者のほうが小さくなったが, その差はさほど大きくはなく, 有意性に変わりはなかった. (4)にて学校効果をモデルに組み込むと, やはりダミー変数の係数はわずかに小さくなった. 次のブログ記事を参考にさせていただいた: https://keita43a.hatenablog.com/entry/2020/12/01/202122.↩︎ "],["ch7.html", "第7章 操作変数法 実証例7.1 単回帰モデルの操作変数推定 実証例7.2 操作変数推定量の標準誤差 実証例7.3 19世紀プロイセンのデータの外生性を含めた2SLS推定による分析 実証例7.4 操作変数の強さの判定 実証例7.5 操作変数の外生性の検定 表7-2 記述統計量 表7-3 推定結果 練習問題 7-13 [実証]", " 第7章 操作変数法 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support07.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support07.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support07.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(estimatr) library(AER) ## Loading required package: lmtest ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## Loading required package: sandwich ## Loading required package: survival library(kableExtra) 実証例7.1 単回帰モデルの操作変数推定 まずはデータを読み込む. ipehd_qje2009_master &lt;- read.csv(&quot;data/07_第7章/ipehd_qje2009_master.csv&quot;) 操作変数法はestimatr::iv_robust()やAER::ivreg()などで実行できる. lm_robust(f_rw ~ f_prot, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## lm_robust(formula = f_rw ~ f_prot, data = ipehd_qje2009_master, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 82.37419 1.41304 58.296 7.716e-212 79.59721 85.1512 450 ## f_prot 0.07998 0.01611 4.964 9.831e-07 0.04831 0.1116 450 ## ## Multiple R-squared: 0.057 , Adjusted R-squared: 0.05491 ## F-statistic: 24.64 on 1 and 450 DF, p-value: 9.831e-07 iv_robust(f_rw ~ f_prot | kmwittenberg, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## iv_robust(formula = f_rw ~ f_prot | kmwittenberg, data = ipehd_qje2009_master, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 60.4509 5.11310 11.82 2.836e-28 50.4024 70.4994 450 ## f_prot 0.4216 0.07109 5.93 6.050e-09 0.2819 0.5613 450 ## ## Multiple R-squared: -0.9827 , Adjusted R-squared: -0.9871 ## F-statistic: 35.16 on 1 and 450 DF, p-value: 6.05e-09 ivreg(f_rw ~ f_prot | kmwittenberg, data = ipehd_qje2009_master) %&gt;% summary(vcov = sandwich::sandwich) ## ## Call: ## ivreg(formula = f_rw ~ f_prot | kmwittenberg, data = ipehd_qje2009_master) ## ## Residuals: ## Min 1Q Median 3Q Max ## -44.342 -9.772 -4.798 11.434 37.559 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 60.45090 5.10177 11.849 &lt; 2e-16 *** ## f_prot 0.42157 0.07094 5.943 5.62e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.87 on 450 degrees of freedom ## Multiple R-Squared: -0.9827, Adjusted R-squared: -0.9871 ## Wald test: 35.32 on 1 and 450 DF, p-value: 5.616e-09 実証例7.2 操作変数推定量の標準誤差 実証例7.1を参照せよ. 実証例7.3 19世紀プロイセンのデータの外生性を含めた2SLS推定による分析 1段階目, 2段階目の両方にコントロール変数を追加する. iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## iv_robust(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss, data = ipehd_qje2009_master, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 177.3665 29.49620 6.0132 3.838e-09 119.3948 235.33821 438 ## f_prot 0.1885 0.02707 6.9640 1.217e-11 0.1353 0.24170 438 ## f_young -1.9524 0.16773 -11.6400 1.806e-27 -2.2820 -1.62271 438 ## f_jew -0.4367 0.34981 -1.2483 2.126e-01 -1.1242 0.25084 438 ## f_fem -1.0726 0.33087 -3.2419 1.278e-03 -1.7229 -0.42234 438 ## f_ortsgeb 0.6066 0.05177 11.7170 9.056e-28 0.5048 0.70835 438 ## f_pruss -0.1807 0.14177 -1.2746 2.031e-01 -0.4593 0.09794 438 ## hhsize 0.8849 1.64334 0.5385 5.905e-01 -2.3449 4.11475 438 ## lnpop -1.3181 0.95739 -1.3768 1.693e-01 -3.1998 0.56351 438 ## gpop 0.4099 0.10914 3.7558 1.961e-04 0.1954 0.62441 438 ## f_blind -27.8647 14.98451 -1.8596 6.362e-02 -57.3152 1.58580 438 ## f_deaf -52.3831 10.41183 -5.0311 7.130e-07 -72.8464 -31.91972 438 ## f_dumb 7.5290 1.70627 4.4125 1.288e-05 4.1755 10.88248 438 ## f_miss -0.5049 0.37778 -1.3366 1.821e-01 -1.2474 0.23755 438 ## ## Multiple R-squared: 0.6886 , Adjusted R-squared: 0.6794 ## F-statistic: 66.57 on 13 and 438 DF, p-value: &lt; 2.2e-16 ivreg(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) %&gt;% summary(vcov = sandwich::sandwich) ## ## Call: ## ivreg(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + ## f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + ## f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + ## f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + ## f_miss, data = ipehd_qje2009_master) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21.5658 -4.4133 -0.1371 4.7447 19.9628 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 177.36653 29.03581 6.109 2.22e-09 *** ## f_prot 0.18850 0.02665 7.074 5.98e-12 *** ## f_young -1.95236 0.16511 -11.825 &lt; 2e-16 *** ## f_jew -0.43667 0.34435 -1.268 0.205434 ## f_fem -1.07263 0.32570 -3.293 0.001071 ** ## f_ortsgeb 0.60660 0.05096 11.903 &lt; 2e-16 *** ## f_pruss -0.18070 0.13956 -1.295 0.196067 ## hhsize 0.88494 1.61769 0.547 0.584630 ## lnpop -1.31814 0.94245 -1.399 0.162630 ## gpop 0.40991 0.10744 3.815 0.000156 *** ## f_blind -27.86468 14.75062 -1.889 0.059545 . ## f_deaf -52.38308 10.24932 -5.111 4.80e-07 *** ## f_dumb 7.52898 1.67964 4.483 9.43e-06 *** ## f_miss -0.50494 0.37188 -1.358 0.175231 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 7.176 on 438 degrees of freedom ## Multiple R-Squared: 0.6886, Adjusted R-squared: 0.6794 ## Wald test: 68.69 on 13 and 438 DF, p-value: &lt; 2.2e-16 iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## iv_robust(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + ## f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + ## f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 179.1507 29.13265 6.149 1.753e-09 121.8935 236.40788 438 ## f_prot 0.1853 0.02572 7.205 2.553e-12 0.1348 0.23591 438 ## f_young -1.9518 0.16695 -11.691 1.145e-27 -2.2799 -1.62366 438 ## f_jew -0.4553 0.34569 -1.317 1.885e-01 -1.1348 0.22406 438 ## f_fem -1.0800 0.33013 -3.271 1.155e-03 -1.7288 -0.43113 438 ## f_ortsgeb 0.6023 0.04980 12.093 2.996e-29 0.5044 0.70016 438 ## f_pruss -0.1858 0.14074 -1.320 1.876e-01 -0.4624 0.09085 438 ## hhsize 0.7897 1.60849 0.491 6.237e-01 -2.3716 3.95102 438 ## lnpop -1.3133 0.95155 -1.380 1.682e-01 -3.1835 0.55683 438 ## gpop 0.4020 0.10650 3.775 1.823e-04 0.1927 0.61133 438 ## f_blind -28.4769 14.69031 -1.938 5.321e-02 -57.3492 0.39532 438 ## f_deaf -52.1996 10.37314 -5.032 7.092e-07 -72.5869 -31.81228 438 ## f_dumb 7.5271 1.68652 4.463 1.029e-05 4.2124 10.84175 438 ## f_miss -0.4979 0.37693 -1.321 1.872e-01 -1.2388 0.24288 438 ## ## Multiple R-squared: 0.692 , Adjusted R-squared: 0.6828 ## F-statistic: 66.54 on 13 and 438 DF, p-value: &lt; 2.2e-16 ivreg(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) %&gt;% summary(vcov = sandwich::sandwich) ## ## Call: ## ivreg(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + ## f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + ## f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + ## f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + ## f_dumb + f_miss, data = ipehd_qje2009_master) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21.4933 -4.4063 -0.1173 4.6397 19.7299 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 179.15072 28.67794 6.247 9.92e-10 *** ## f_prot 0.18535 0.02532 7.319 1.20e-12 *** ## f_young -1.95178 0.16434 -11.876 &lt; 2e-16 *** ## f_jew -0.45535 0.34029 -1.338 0.181553 ## f_fem -1.07995 0.32497 -3.323 0.000965 *** ## f_ortsgeb 0.60228 0.04903 12.285 &lt; 2e-16 *** ## f_pruss -0.18577 0.13855 -1.341 0.180673 ## hhsize 0.78970 1.58339 0.499 0.618213 ## lnpop -1.31335 0.93670 -1.402 0.161593 ## gpop 0.40201 0.10484 3.835 0.000144 *** ## f_blind -28.47694 14.46102 -1.969 0.049558 * ## f_deaf -52.19960 10.21123 -5.112 4.77e-07 *** ## f_dumb 7.52707 1.66020 4.534 7.49e-06 *** ## f_miss -0.49794 0.37105 -1.342 0.180298 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 7.138 on 438 degrees of freedom ## Multiple R-Squared: 0.692, Adjusted R-squared: 0.6828 ## Wald test: 68.66 on 13 and 438 DF, p-value: &lt; 2.2e-16 実証例7.4 操作変数の強さの判定 lm_robust(f_prot ~ kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## lm_robust(formula = f_prot ~ kmwittenberg + f_young + f_jew + ## f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + ## f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 478.89583 119.4917 4.0078 7.203e-05 244.0475 713.74420 438 ## kmwittenberg -0.09469 0.0114 -8.3036 1.270e-15 -0.1171 -0.07228 438 ## f_young 0.20509 0.7650 0.2681 7.888e-01 -1.2984 1.70859 438 ## f_jew -7.26355 1.2312 -5.8998 7.292e-09 -9.6833 -4.84383 438 ## f_fem -0.55734 1.3016 -0.4282 6.687e-01 -3.1155 2.00086 438 ## f_ortsgeb -1.39007 0.1331 -10.4462 5.882e-23 -1.6516 -1.12853 438 ## f_pruss -1.93455 0.7897 -2.4497 1.469e-02 -3.4867 -0.38244 438 ## hhsize -14.61046 5.9310 -2.4634 1.415e-02 -26.2672 -2.95374 438 ## lnpop -0.97709 3.9664 -0.2463 8.055e-01 -8.7727 6.81850 438 ## gpop -1.96156 0.3261 -6.0147 3.806e-09 -2.6025 -1.32059 438 ## f_blind -82.26611 57.0172 -1.4428 1.498e-01 -194.3274 29.79517 438 ## f_deaf 104.61556 31.5326 3.3177 9.833e-04 42.6415 166.58965 438 ## f_dumb -2.31377 8.7324 -0.2650 7.912e-01 -19.4764 14.84886 438 ## f_miss 1.72902 1.4842 1.1649 2.447e-01 -1.1880 4.64609 438 ## ## Multiple R-squared: 0.4194 , Adjusted R-squared: 0.4021 ## F-statistic: 40.82 on 13 and 438 DF, p-value: &lt; 2.2e-16 lm_robust(f_prot ~ kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master) %&gt;% summary() ## ## Call: ## lm_robust(formula = f_prot ~ kmwittenberg * (lnpop + gpop) + ## f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + ## f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) 649.639939 1.412e+02 4.6014 5.510e-06 3.722e+02 ## kmwittenberg -0.580762 2.998e-01 -1.9375 5.334e-02 -1.170e+00 ## lnpop -16.415951 8.621e+00 -1.9041 5.755e-02 -3.336e+01 ## gpop 0.726697 7.633e-01 0.9520 3.416e-01 -7.736e-01 ## f_young 0.613596 8.027e-01 0.7644 4.450e-01 -9.641e-01 ## f_jew -7.053875 1.235e+00 -5.7134 2.054e-08 -9.480e+00 ## f_fem -0.740260 1.301e+00 -0.5692 5.695e-01 -3.296e+00 ## f_ortsgeb -1.377103 1.315e-01 -10.4708 4.894e-23 -1.636e+00 ## f_pruss -1.927401 7.300e-01 -2.6401 8.585e-03 -3.362e+00 ## hhsize -16.275257 5.844e+00 -2.7852 5.583e-03 -2.776e+01 ## f_blind -87.656566 5.671e+01 -1.5457 1.229e-01 -1.991e+02 ## f_deaf 91.641755 3.220e+01 2.8457 4.641e-03 2.835e+01 ## f_dumb -2.015459 8.753e+00 -0.2303 8.180e-01 -1.922e+01 ## f_miss 2.068423 1.493e+00 1.3858 1.665e-01 -8.651e-01 ## kmwittenberg:lnpop 0.045825 2.780e-02 1.6486 9.995e-02 -8.806e-03 ## kmwittenberg:gpop -0.007717 2.129e-03 -3.6249 3.232e-04 -1.190e-02 ## CI Upper DF ## (Intercept) 927.123943 436 ## kmwittenberg 0.008384 436 ## lnpop 0.528377 436 ## gpop 2.226960 436 ## f_young 2.191285 436 ## f_jew -4.627328 436 ## f_fem 1.815939 436 ## f_ortsgeb -1.118613 436 ## f_pruss -0.492568 436 ## hhsize -4.790276 436 ## f_blind 23.798822 436 ## f_deaf 154.935818 436 ## f_dumb 15.187240 436 ## f_miss 5.001929 436 ## kmwittenberg:lnpop 0.100455 436 ## kmwittenberg:gpop -0.003533 436 ## ## Multiple R-squared: 0.4307 , Adjusted R-squared: 0.4111 ## F-statistic: 34.26 on 15 and 436 DF, p-value: &lt; 2.2e-16 実証例7.5 操作変数の外生性の検定 ここでは均一分散用の標準誤差で計算する. HansenのJ検定は, iv_robust()でdiagnostics = TRUEとすると, summary()のOveridentifyingの欄に表示される. (ivreg()でもsummary(diagnostics = TRUE)とすると同様にできるはずだが, 同じ値が得られなかった.) model_73_1 &lt;- ivreg(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) model_75_1 &lt;- lm(model_73_1$residuals ~ kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) summary(model_75_1) ## ## Call: ## lm(formula = model_73_1$residuals ~ kmwittenberg + f_young + ## f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + ## f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21.5658 -4.4133 -0.1371 4.7447 19.9628 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.329e-12 2.935e+01 0 1 ## kmwittenberg 1.454e-16 2.697e-03 0 1 ## f_young 4.452e-15 1.723e-01 0 1 ## f_jew 6.018e-15 3.047e-01 0 1 ## f_fem -2.790e-14 3.294e-01 0 1 ## f_ortsgeb -1.756e-16 3.294e-02 0 1 ## f_pruss -1.257e-14 1.967e-01 0 1 ## hhsize -9.685e-14 1.417e+00 0 1 ## lnpop -2.678e-14 9.525e-01 0 1 ## gpop -4.846e-15 9.918e-02 0 1 ## f_blind 1.364e-15 1.252e+01 0 1 ## f_deaf 9.140e-14 8.272e+00 0 1 ## f_dumb -2.833e-14 2.069e+00 0 1 ## f_miss 3.208e-15 3.479e-01 0 1 ## ## Residual standard error: 7.176 on 438 degrees of freedom ## Multiple R-squared: 3.428e-29, Adjusted R-squared: -0.02968 ## F-statistic: 1.155e-27 on 13 and 438 DF, p-value: 1 hypothesis &lt;- c(&quot;kmwittenberg&quot;, &quot;lnpop&quot;, &quot;gpop&quot;, &quot;f_young&quot;, &quot;f_jew&quot;, &quot;f_fem&quot;, &quot;f_ortsgeb&quot;, &quot;f_pruss&quot;, &quot;hhsize&quot;, &quot;f_blind&quot;, &quot;f_deaf&quot;, &quot;f_dumb&quot;, &quot;f_miss&quot;) linearHypothesis(model_75_1, hypothesis, rep(0, length(hypothesis)), &quot;Chisq&quot;) ## ## Linear hypothesis test: ## kmwittenberg = 0 ## lnpop = 0 ## gpop = 0 ## f_young = 0 ## f_jew = 0 ## f_fem = 0 ## f_ortsgeb = 0 ## f_pruss = 0 ## hhsize = 0 ## f_blind = 0 ## f_deaf = 0 ## f_dumb = 0 ## f_miss = 0 ## ## Model 1: restricted model ## Model 2: model_73_1$residuals ~ kmwittenberg + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss ## ## Res.Df RSS Df Sum of Sq Chisq Pr(&gt;Chisq) ## 1 451 22556 ## 2 438 22556 13 0 0 1 model_73_2 &lt;- ivreg(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) model_75_2 &lt;- lm(model_73_2$residuals ~ kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) summary(model_75_2) ## ## Call: ## lm(formula = model_73_2$residuals ~ kmwittenberg * (lnpop + gpop) + ## f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + ## f_blind + f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21.3447 -4.3890 -0.1007 4.6353 19.7419 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.193e+01 3.738e+01 -0.319 0.750 ## kmwittenberg 3.506e-02 7.091e-02 0.494 0.621 ## lnpop 1.034e+00 2.285e+00 0.452 0.651 ## gpop -5.554e-02 2.489e-01 -0.223 0.824 ## f_young 6.741e-04 1.778e-01 0.004 0.997 ## f_jew -5.388e-03 3.044e-01 -0.018 0.986 ## f_fem 1.195e-02 3.287e-01 0.036 0.971 ## f_ortsgeb -5.907e-04 3.285e-02 -0.018 0.986 ## f_pruss -1.984e-03 1.960e-01 -0.010 0.992 ## hhsize 8.812e-02 1.419e+00 0.062 0.951 ## f_blind 8.972e-01 1.253e+01 0.072 0.943 ## f_deaf 4.100e-01 8.318e+00 0.049 0.961 ## f_dumb -2.080e-02 2.062e+00 -0.010 0.992 ## f_miss -1.432e-02 3.480e-01 -0.041 0.967 ## kmwittenberg:lnpop -3.290e-03 6.587e-03 -0.499 0.618 ## kmwittenberg:gpop 1.663e-04 6.549e-04 0.254 0.800 ## ## Residual standard error: 7.152 on 436 degrees of freedom ## Multiple R-squared: 0.0006048, Adjusted R-squared: -0.03378 ## F-statistic: 0.01759 on 15 and 436 DF, p-value: 1 hypothesis &lt;- c(&quot;kmwittenberg&quot;, &quot;lnpop&quot;, &quot;gpop&quot;, &quot;kmwittenberg:lnpop&quot;, &quot;kmwittenberg:gpop&quot;, &quot;f_young&quot;, &quot;f_jew&quot;, &quot;f_fem&quot;, &quot;f_ortsgeb&quot;, &quot;f_pruss&quot;, &quot;hhsize&quot;, &quot;f_blind&quot;, &quot;f_deaf&quot;, &quot;f_dumb&quot;, &quot;f_miss&quot;) linearHypothesis(model_75_2, hypothesis, rep(0, length(hypothesis)), &quot;Chisq&quot;) ## ## Linear hypothesis test: ## kmwittenberg = 0 ## lnpop = 0 ## gpop = 0 ## kmwittenberg:lnpop = 0 ## kmwittenberg:gpop = 0 ## f_young = 0 ## f_jew = 0 ## f_fem = 0 ## f_ortsgeb = 0 ## f_pruss = 0 ## hhsize = 0 ## f_blind = 0 ## f_deaf = 0 ## f_dumb = 0 ## f_miss = 0 ## ## Model 1: restricted model ## Model 2: model_73_2$residuals ~ kmwittenberg * (lnpop + gpop) + f_young + ## f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + ## f_deaf + f_dumb + f_miss ## ## Res.Df RSS Df Sum of Sq Chisq Pr(&gt;Chisq) ## 1 451 22314 ## 2 436 22300 15 13.495 0.2638 1 qchisq(0.9, 2) ## [1] 4.60517 # HansenのJ検定 iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master, diagnostics = T) %&gt;% summary() ## ## Call: ## iv_robust(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + ## f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + ## f_deaf + f_dumb + f_miss, data = ipehd_qje2009_master, se_type = &quot;stata&quot;, ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 179.1507 29.13265 6.149 1.753e-09 121.8935 236.40788 438 ## f_prot 0.1853 0.02572 7.205 2.553e-12 0.1348 0.23591 438 ## f_young -1.9518 0.16695 -11.691 1.145e-27 -2.2799 -1.62366 438 ## f_jew -0.4553 0.34569 -1.317 1.885e-01 -1.1348 0.22406 438 ## f_fem -1.0800 0.33013 -3.271 1.155e-03 -1.7288 -0.43113 438 ## f_ortsgeb 0.6023 0.04980 12.093 2.996e-29 0.5044 0.70016 438 ## f_pruss -0.1858 0.14074 -1.320 1.876e-01 -0.4624 0.09085 438 ## hhsize 0.7897 1.60849 0.491 6.237e-01 -2.3716 3.95102 438 ## lnpop -1.3133 0.95155 -1.380 1.682e-01 -3.1835 0.55683 438 ## gpop 0.4020 0.10650 3.775 1.823e-04 0.1927 0.61133 438 ## f_blind -28.4769 14.69031 -1.938 5.321e-02 -57.3492 0.39532 438 ## f_deaf -52.1996 10.37314 -5.032 7.092e-07 -72.5869 -31.81228 438 ## f_dumb 7.5271 1.68652 4.463 1.029e-05 4.2124 10.84175 438 ## f_miss -0.4979 0.37693 -1.321 1.872e-01 -1.2388 0.24288 438 ## ## Multiple R-squared: 0.692 , Adjusted R-squared: 0.6828 ## F-statistic: 66.54 on 13 and 438 DF, p-value: &lt; 2.2e-16 ## ## Diagnostics: ## numdf dendf value p.value ## Weak instruments 3 436 29.794 &lt; 2e-16 *** ## Wu-Hausman 1 437 14.325 0.000175 *** ## Overidentifying 2 NA 0.382 0.826014 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # 異なる値になる? #summary(model_73_2, diagnostics = TRUE) 表7-2 記述統計量 やはり第5章の表5-5や第6章の表6-3と同様にdatasummary()を用いてデータフレームを書き出し, 適宜リネームを行えばよい. # 変数を選択 vars &lt;- ipehd_qje2009_master %&gt;% select(f_rw, f_prot, kmwittenberg, f_young, f_jew, f_fem, f_ortsgeb, f_pruss, hhsize, lnpop, gpop, f_blind, f_deaf, f_dumb, f_miss) table63 &lt;- datasummary(All(vars) ~ N + Mean + SD + Min + Max, output = &quot;data.frame&quot;, data = ipehd_qje2009_master, fmt = 3) # 列名 colnames(table63) &lt;- c(&quot;変数&quot;, &quot;サンプルサイズ&quot;, &quot;平均&quot;, &quot;標準偏差&quot;, &quot;最小値&quot;, &quot;最大値&quot;) # 変数名 table63[,1] &lt;- c(&quot;識字率&quot;, &quot;新教徒率&quot;, &quot;距離&quot;, &quot;子供率&quot;, &quot;ユダヤ率&quot;, &quot;女性率&quot;, &quot;出身者率&quot;, &quot;普人率&quot;, &quot;平均家計人数&quot;, &quot;対数人口&quot;, &quot;人口成長率&quot;, &quot;視覚障害率&quot;, &quot;聴覚障害率&quot;, &quot;知的・精神障害率&quot;, &quot;欠落率&quot;) # 表を出力 gt(table63) #xdijkbegae table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #xdijkbegae thead, #xdijkbegae tbody, #xdijkbegae tfoot, #xdijkbegae tr, #xdijkbegae td, #xdijkbegae th { border-style: none; } #xdijkbegae p { margin: 0; padding: 0; } #xdijkbegae .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #xdijkbegae .gt_caption { padding-top: 4px; padding-bottom: 4px; } #xdijkbegae .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #xdijkbegae .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #xdijkbegae .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xdijkbegae .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xdijkbegae .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xdijkbegae .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #xdijkbegae .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #xdijkbegae .gt_column_spanner_outer:first-child { padding-left: 0; } #xdijkbegae .gt_column_spanner_outer:last-child { padding-right: 0; } #xdijkbegae .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #xdijkbegae .gt_spanner_row { border-bottom-style: hidden; } #xdijkbegae .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #xdijkbegae .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #xdijkbegae .gt_from_md > :first-child { margin-top: 0; } #xdijkbegae .gt_from_md > :last-child { margin-bottom: 0; } #xdijkbegae .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #xdijkbegae .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #xdijkbegae .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #xdijkbegae .gt_row_group_first td { border-top-width: 2px; } #xdijkbegae .gt_row_group_first th { border-top-width: 2px; } #xdijkbegae .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xdijkbegae .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #xdijkbegae .gt_first_summary_row.thick { border-top-width: 2px; } #xdijkbegae .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xdijkbegae .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xdijkbegae .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #xdijkbegae .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #xdijkbegae .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #xdijkbegae .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xdijkbegae .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xdijkbegae .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #xdijkbegae .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xdijkbegae .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #xdijkbegae .gt_left { text-align: left; } #xdijkbegae .gt_center { text-align: center; } #xdijkbegae .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #xdijkbegae .gt_font_normal { font-weight: normal; } #xdijkbegae .gt_font_bold { font-weight: bold; } #xdijkbegae .gt_font_italic { font-style: italic; } #xdijkbegae .gt_super { font-size: 65%; } #xdijkbegae .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #xdijkbegae .gt_asterisk { font-size: 100%; vertical-align: 0; } #xdijkbegae .gt_indent_1 { text-indent: 5px; } #xdijkbegae .gt_indent_2 { text-indent: 10px; } #xdijkbegae .gt_indent_3 { text-indent: 15px; } #xdijkbegae .gt_indent_4 { text-indent: 20px; } #xdijkbegae .gt_indent_5 { text-indent: 25px; } #xdijkbegae .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #xdijkbegae div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } 変数 サンプルサイズ 平均 標準偏差 最小値 最大値 識字率 452 87.507 12.673 37.397 99.332 新教徒率 452 64.181 37.831 0.258 99.889 距離 452 326.185 148.769 0.000 731.460 子供率 452 24.707 2.478 15.334 29.868 ユダヤ率 452 1.139 1.327 0.000 12.869 女性率 452 51.003 1.507 43.969 54.627 出身者率 452 58.970 12.386 32.009 87.230 普人率 452 99.072 1.966 74.215 99.995 平均家計人数 452 4.791 0.344 3.826 5.861 対数人口 452 10.804 0.415 9.360 13.625 人口成長率 452 1.595 4.932 -7.762 33.833 視覚障害率 452 0.095 0.031 0.034 0.238 聴覚障害率 452 0.101 0.054 0.022 0.421 知的・精神障害率 452 0.229 0.174 0.022 1.558 欠落率 452 1.689 1.105 0.000 6.720 表7-3 推定結果 (6)の標準誤差がStataと一致していないため注意. modelsummaryの出力はkableExtra, gtなどで整形することができるが, 前者が数式との相性がよい. models_73 &lt;- list(&quot;(1)&quot; = lm_robust(f_rw ~ f_prot, se_type = &quot;stata&quot;, data = ipehd_qje2009_master), &quot;(2)&quot; = iv_robust(f_rw ~ f_prot | kmwittenberg, se_type = &quot;stata&quot;, data = ipehd_qje2009_master, diagnostics = TRUE), &quot;(3)&quot; = lm_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master), &quot;(4)&quot; = iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master, diagnostics = TRUE), &quot;(5)&quot; = lm_robust(f_prot ~ kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;stata&quot;, data = ipehd_qje2009_master), &quot;(6)&quot; = iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg * (lnpop + gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + f_blind + f_deaf + f_dumb + f_miss, se_type = &quot;HC1&quot;, data = ipehd_qje2009_master, diagnostics = TRUE)) cm &lt;- c(&quot;f_rw&quot; = &quot;識字率&quot;, &quot;f_prot&quot; = &quot;新教徒率&quot;, &quot;kmwittenberg&quot; = &quot;距離&quot;, &quot;f_young&quot; = &quot;子供率&quot;, &quot;f_jew&quot; = &quot;ユダヤ率&quot;, &quot;f_fem&quot; = &quot;女性率&quot;, &quot;f_ortsgeb&quot; = &quot;出身者率&quot;, &quot;f_pruss&quot; = &quot;普人率&quot;, &quot;hhsize&quot; = &quot;平均家計人数&quot;, &quot;lnpop&quot; = &quot;対数人口&quot;, &quot;gpop&quot; = &quot;人口成長率&quot;, &quot;f_blind&quot; = &quot;視覚障害率&quot;, &quot;f_deaf&quot; = &quot;聴覚障害率&quot;, &quot;f_dumb&quot; = &quot;知的・精神障害率&quot;, &quot;f_miss&quot; = &quot;欠落率&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) # スタイガー=ストック検定統計量の値を表示するモデルを指定 attr(models_73$`(2)`, &quot;STAIGERSTOCK&quot;) &lt;- TRUE attr(models_73$`(4)`, &quot;STAIGERSTOCK&quot;) &lt;- TRUE attr(models_73$`(6)`, &quot;STAIGERSTOCK&quot;) &lt;- TRUE # J検定統計量の値を表示するモデルを指定 attr(models_73$`(6)`, &quot;J&quot;) &lt;- TRUE glance_custom.iv_robust &lt;- function(x) { # 上で指定した, スタイガー=ストック検定統計量の値を表示したいモデルでなければパス if (!isTRUE(attr(x, &quot;STAIGERSTOCK&quot;))) return(NULL) # スタイガー=ストック検定統計量の値を取得 staigerstock &lt;- summary(x)$diagnostic_first_stage_fstatistic # スタイガー=ストック検定統計量の値をまとめたtibbleを作成 out &lt;- tibble(&quot;staiger_stock_test&quot; = staigerstock[&quot;value&quot;], &quot;adj.r.squared&quot; = &quot;&quot;) # adjR2を消す # J検定統計量の値を表示するモデル if (isTRUE(attr(x, &quot;J&quot;))) { # J検定量の値を取得 j &lt;- summary(x)$diagnostic_overid_test # tibbleにJ検定量の値とそのP値を追加 out &lt;- out %&gt;% mutate(&quot;j_test&quot; = j[&quot;value&quot;], &quot;p_value&quot; = sprintf(&quot;(%.3f)&quot;, j[&quot;p.value&quot;])) } return(out) } gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;staiger_stock_test&quot;, &quot;スタイガー=ストック検定統計量&quot;, 2, &quot;j_test&quot;, &quot;$J$検定統計量&quot;, 3, &quot;p_value&quot;, &quot; &quot;, 3, &quot;adj.r.squared&quot;, &quot;$\\\\bar{R}^2$&quot;, 3, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) rows &lt;- tribble(~term, ~`(1)`, ~`(2)`, ~`(3)`, ~`(4)`, ~`(5)`, ~`(6)`, &quot;被説明変数&quot;, &quot;識字率&quot;, &quot;識字率&quot;, &quot;識字率&quot;, &quot;識字率&quot;, &quot;新教徒率&quot;, &quot;識字率&quot;, &quot;推定法&quot;, &quot;OLS&quot;, &quot;2SLS&quot;, &quot;OLS&quot;, &quot;2SLS&quot;, &quot;OLS&quot;, &quot;2SLS&quot;) attr(rows, &#39;position&#39;) &lt;- c(1, 2) # kableExtraで出力して, 手動で下線を追加する. # ただしkableExtraでHTML出力するとフッター(星の説明)の&quot;&lt;&quot;の文字が消えてしまうので, estimateを手動してすることでフッターを自動生成させないようにし, notesで手動で追加する. modelsummary(models_73, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), gof_map = gm, coef_map = cm, add_rows = rows, estimate = &quot;{estimate}{stars}&quot;, output = &quot;kableExtra&quot;, notes = &quot;* p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001&quot;) %&gt;% row_spec(c(0, 2, 35, 37), extra_css = &quot;border-bottom: 1.5px solid&quot;) %&gt;% row_spec(32, extra_css = &quot;;border-bottom: 1.5px solid&quot;) # 32行目の下 (estimateとstatisticsの境) のみコロンが必要 &amp;nbsp;(1) &amp;nbsp;&amp;nbsp;(2) &amp;nbsp;&amp;nbsp;(3) &amp;nbsp;&amp;nbsp;(4) &amp;nbsp;&amp;nbsp;(5) &amp;nbsp;&amp;nbsp;(6) 被説明変数 識字率 識字率 識字率 識字率 新教徒率 識字率 推定法 OLS 2SLS OLS 2SLS OLS 2SLS 新教徒率 0.080*** 0.422*** 0.099*** 0.189*** 0.185*** (0.016) (0.071) (0.010) (0.027) (0.026) 距離 −0.095*** (0.011) 子供率 −1.936*** −1.952*** 0.205 −1.952*** (0.158) (0.168) (0.765) (0.167) ユダヤ率 −0.965** −0.437 −7.264*** −0.455 (0.329) (0.350) (1.231) (0.346) 女性率 −1.280*** −1.073** −0.557 −1.080** (0.301) (0.331) (1.302) (0.330) 出身者率 0.484*** 0.607*** −1.390*** 0.602*** (0.033) (0.052) (0.133) (0.050) 普人率 −0.324* −0.181 −1.935* −0.186 (0.135) (0.142) (0.790) (0.141) 平均家計人数 −1.812 0.885 −14.610* 0.790 (1.218) (1.643) (5.931) (1.608) 対数人口 −1.183 −1.318 −0.977 −1.313 (0.872) (0.957) (3.966) (0.952) 人口成長率 0.186* 0.410*** −1.962*** 0.402*** (0.089) (0.109) (0.326) (0.107) 視覚障害率 −45.200*** −27.865 −82.266 −28.477 (13.113) (14.985) (57.017) (14.690) 聴覚障害率 −47.188*** −52.383*** 104.616*** −52.200*** (9.759) (10.412) (31.533) (10.373) 知的・精神障害率 7.475*** 7.529*** −2.314 7.527*** (1.411) (1.706) (8.732) (1.687) 欠落率 −0.307 −0.505 1.729 −0.498 (0.383) (0.378) (1.484) (0.377) 定数項 82.374*** 60.451*** 227.884*** 177.367*** 478.896*** 179.151*** (1.413) (5.113) (24.391) (29.496) (119.492) (29.133) スタイガー=ストック検定統計量 46.81 68.95 29.79 \\(J\\)検定統計量 0.382 (0.826) \\(\\bar{R}^2\\) 0.055 0.729 0.402 サンプルサイズ 452 452 452 452 452 452 * p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001 練習問題 7-13 [実証] 表7-3を参照せよ. "],["ch8.html", "第8章 制限従属変数モデル 実証例8.1 PIAACを用いた女性の就業選択の実証例 表8-1 女性の就業決定 実証例8.2 PIAACを用いた仕事満足度の決定要因の分析 実証例8.3 PIAACを用いた就業形態決定要因の分析 実証例8.4 PIAACを用いた女性の労働時間決定の分析 実証例8.5 PIAACを用いた女性賃金の決定要因の分析 練習問題 8-4 [実証]", " 第8章 制限従属変数モデル 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support08.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support08.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support08.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(estimatr) library(margins) library(modelsummary) library(gt) library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:wooldridge&#39;: ## ## cement ## The following object is masked from &#39;package:dplyr&#39;: ## ## select library(marginaleffects) library(pscl) ## Classes and Methods for R originally developed in the ## Political Science Computational Laboratory ## Department of Political Science ## Stanford University (2002-2015), ## by and under the direction of Simon Jackman. ## hurdle and zeroinfl functions by Achim Zeileis. library(nnet) library(AER) library(sampleSelection) ## Loading required package: maxLik ## Loading required package: miscTools ## ## Please cite the &#39;maxLik&#39; package as: ## Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1. ## ## If you have questions, suggestions, or comments regarding the &#39;maxLik&#39; package, please use a forum or &#39;tracker&#39; at maxLik&#39;s R-Forge site: ## https://r-forge.r-project.org/projects/maxlik/ 実証例8.1 PIAACを用いた女性の就業選択の実証例 まずはデータを読み込む. piaac &lt;- read.csv(&quot;data/08_第8章/piaac.csv&quot;) プロビット/ロジットモデルの推定には, glm()を用い, 引数にfamily = binomial(link = \"probit\")などと指定する. 限界効果は (Rの確率密度関数を用いて) 手計算でもできるが, marginsパッケージを使うと自動で求められる (参考). # 女性に限定し, さらに就業ダミー変数を作成 piaac_female &lt;- piaac %&gt;% filter(gender == &quot;Female&quot;) %&gt;% mutate(emp = ifelse(lfs == &quot;Employed&quot;, 1, 0)) model_811 &lt;- lm_robust(emp ~ educ + age + couple + child, data = piaac_female, se_type = &quot;stata&quot;) summary(model_811) ## ## Call: ## lm_robust(formula = emp ~ educ + age + couple + child, data = piaac_female, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.375932 0.105430 3.566 0.0003727 0.1691497 0.58271 1742 ## educ 0.019482 0.005882 3.312 0.0009448 0.0079454 0.03102 1742 ## age 0.002013 0.001166 1.726 0.0845504 -0.0002746 0.00430 1742 ## couple -0.117846 0.031481 -3.743 0.0001874 -0.1795902 -0.05610 1742 ## child 0.013723 0.012861 1.067 0.2860951 -0.0115009 0.03895 1742 ## ## Multiple R-squared: 0.0137 , Adjusted R-squared: 0.01144 ## F-statistic: 6.665 on 4 and 1742 DF, p-value: 2.541e-05 model_812 &lt;- glm(emp ~ educ + age + couple + child, data = piaac_female, family = binomial(link = &quot;probit&quot;)) summary(model_812) ## ## Call: ## glm(formula = emp ~ educ + age + couple + child, family = binomial(link = &quot;probit&quot;), ## data = piaac_female) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.344270 0.288020 -1.195 0.231970 ## educ 0.053671 0.016076 3.339 0.000842 *** ## age 0.005297 0.002997 1.767 0.077161 . ## couple -0.339106 0.097026 -3.495 0.000474 *** ## child 0.039649 0.033777 1.174 0.240461 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2264.1 on 1746 degrees of freedom ## Residual deviance: 2239.5 on 1742 degrees of freedom ## (958 observations deleted due to missingness) ## AIC: 2249.5 ## ## Number of Fisher Scoring iterations: 4 model_813 &lt;- margins(model_812) summary(model_813) ## factor AME SE z p lower upper ## age 0.0019 0.0011 1.7721 0.0764 -0.0002 0.0041 ## child 0.0145 0.0124 1.1751 0.2400 -0.0097 0.0388 ## couple -0.1243 0.0352 -3.5298 0.0004 -0.1933 -0.0553 ## educ 0.0197 0.0058 3.3702 0.0008 0.0082 0.0311 model_814 &lt;- glm(emp ~ educ + age + couple + child, data = piaac_female, family = binomial(link = &quot;logit&quot;)) summary(model_814) ## ## Call: ## glm(formula = emp ~ educ + age + couple + child, family = binomial(link = &quot;logit&quot;), ## data = piaac_female) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.578109 0.471171 -1.227 0.219837 ## educ 0.086867 0.026266 3.307 0.000942 *** ## age 0.008822 0.004886 1.806 0.070975 . ## couple -0.558740 0.163200 -3.424 0.000618 *** ## child 0.071606 0.057635 1.242 0.214084 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2264.1 on 1746 degrees of freedom ## Residual deviance: 2239.4 on 1742 degrees of freedom ## (958 observations deleted due to missingness) ## AIC: 2249.4 ## ## Number of Fisher Scoring iterations: 4 model_815 &lt;- margins(model_814) summary(model_815) ## factor AME SE z p lower upper ## age 0.0020 0.0011 1.8118 0.0700 -0.0002 0.0041 ## child 0.0161 0.0129 1.2442 0.2134 -0.0093 0.0414 ## couple -0.1255 0.0362 -3.4630 0.0005 -0.1965 -0.0545 ## educ 0.0195 0.0058 3.3453 0.0008 0.0081 0.0309 表8-1 女性の就業決定 推定方法と\\(\\bar{R}^2\\text{/疑似}R^2\\)を表示する行を追加した. models_81 &lt;- list(&quot;(1)&quot; = model_811, &quot;(2)&quot; = model_812, &quot;(3)&quot; = model_813, &quot;(4)&quot; = model_814, &quot;(5)&quot; = model_815) cm &lt;- c(&quot;educ&quot; = &quot;教育年数&quot;, &quot;age&quot; = &quot;年齢&quot;, &quot;couple&quot; = &quot;配偶者あり&quot;, &quot;child&quot; = &quot;子供数&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) glance_custom.lm_robust &lt;- function(x) { out &lt;- tibble(&quot;adj.r.squared_or_peseudo.r.squared&quot; = x$adj.r.squared) return(out) } glance_custom.glm &lt;- function(x) { peseudo.r.squared &lt;- 1 - (x$deviance / x$null.deviance) out &lt;- tibble(&quot;adj.r.squared_or_peseudo.r.squared&quot; = peseudo.r.squared) return(out) } gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;adj.r.squared_or_peseudo.r.squared&quot;, &quot;$\\\\bar{R}^2$/疑似$R^2$&quot;, 2, &quot;nobs&quot;, &quot;$N$&quot;, 0) rows &lt;- tribble(~term, ~`(1)`, ~`(2)`, ~`(3)`, ~`(4)`, ~`(5)`, &quot;推定方法&quot;, &quot;OLS&quot;, &quot;プロビット&quot;, &quot;限界効果&quot;, &quot;ロジット&quot;, &quot;限界効果&quot;) attr(rows, &#39;position&#39;) &lt;- 1 modelsummary(models_81, coef_map = cm, gof_map = gm, add_rows = rows, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), estimate = &quot;{estimate}{stars}&quot;, output = &quot;kableExtra&quot;, notes = &quot;* p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001&quot;) %&gt;% row_spec(c(1, 13), extra_css = &quot;border-bottom: 1.5px solid&quot;) %&gt;% row_spec(11, extra_css = &quot;;border-bottom: 1.5px solid&quot;) # 32行目の下 (estimateとstatisticsの境) のみコロンが必要 &amp;nbsp;(1) &amp;nbsp;&amp;nbsp;(2) &amp;nbsp;&amp;nbsp;(3) &amp;nbsp;&amp;nbsp;(4) &amp;nbsp;&amp;nbsp;(5) 推定方法 OLS プロビット 限界効果 ロジット 限界効果 教育年数 0.019*** 0.054*** 0.020*** 0.087*** 0.020*** (0.006) (0.016) (0.006) (0.026) (0.006) 年齢 0.002 0.005 0.002 0.009 0.002 (0.001) (0.003) (0.001) (0.005) (0.001) 配偶者あり −0.118*** −0.339*** −0.124*** −0.559*** −0.126*** (0.031) (0.097) (0.035) (0.163) (0.036) 子供数 0.014 0.040 0.015 0.072 0.016 (0.013) (0.034) (0.012) (0.058) (0.013) 定数項 0.376*** −0.344 −0.578 (0.105) (0.288) (0.471) \\(\\bar{R}^2\\)/疑似\\(R^2\\) 0.01 0.01 0.01 \\(N\\) 1747 1747 1747 * p &amp;lt; 0.05, ** p &amp;lt; 0.01, *** p &amp;lt; 0.001 実証例8.2 PIAACを用いた仕事満足度の決定要因の分析 順序付きプロビットモデルの推定には, MASS::polrを使う. 他にもoglmx::oprobit.reg()などがある. polrで推定した順序付きプロビットモデルは, marginaleffect::avg_slopes()に渡すことで限界効果を求めることができる. ただし, avg_slopes()はデフォルトでは標準誤差の計算にt分布ではなく正規分布を仮定するため, dfを指定してt分布を使うようにする. 表の統計量欄にあるMcFaddenの擬似\\(R^2\\)は, pscl::pR2()を使って求めた. # 男性に限定し, さらに仕事満足度を示す変数をファクター化し順序を与える piaac_male &lt;- piaac %&gt;% filter(gender == &quot;Male&quot;) %&gt;% mutate(jsrev = factor(js, levels = c(&quot;Extremely dissatisfied&quot;, &quot;Dissatisfied&quot;, &quot;Neither satisfied nor dissatisfied&quot;,&quot;Satisfied&quot;, &quot;Extremely satisfied&quot;), ordered = TRUE)) model_82 &lt;- polr(jsrev ~ educ + age + couple + child, data = piaac_male, method = &quot;probit&quot;) # avg_slopesは標準ではt分布ではなく正規分布を仮定するため, dfを指定する model_82_marginal &lt;- avg_slopes(model_82, df = insight::get_df(model_82)) # %ポイント変化を求めるために一旦listに書き出し model_82_marginal &lt;- modelsummary(model_82_marginal, shape = term ~ group, output = &quot;modelsummary_list&quot;, fmt = 5) # パーセント表示に変換し, また表示のために仕事満足度順に並び替え model_82_marginal$tidy &lt;- model_82_marginal$tidy %&gt;% mutate(estimate = estimate * 100) %&gt;% mutate(std.error = std.error * 100) %&gt;% mutate(conf.low = conf.low * 100) %&gt;% mutate(conf.high = conf.high * 100) %&gt;% mutate(group = factor(group, levels = c(&quot;Extremely dissatisfied&quot;, &quot;Dissatisfied&quot;, &quot;Neither satisfied nor dissatisfied&quot;,&quot;Satisfied&quot;, &quot;Extremely satisfied&quot;), labels = c(&quot;とても不満&quot;, &quot;不満&quot;, &quot;どちらでもない&quot;, &quot;満足&quot;, &quot;とても満足&quot;), ordered = TRUE)) %&gt;% arrange(group) # 限界効果の統計量 (サンプルサイズ) は表示に不要なのでNULLを代入 model_82_marginal$glance &lt;- NULL models_82 &lt;- list(&quot;モデル係数&quot; = model_82, &quot;限界効果 (% ポイント変化)&quot; = model_82_marginal) cm &lt;- c(&quot;educ&quot; = &quot;教育年数&quot;, &quot;age&quot; = &quot;年齢&quot;, &quot;couple&quot; = &quot;配偶者あり&quot;, &quot;child&quot; = &quot;子供数&quot;, &quot;Extremely dissatisfied|Dissatisfied&quot; = &quot;$\\\\mu_1$&quot;, &quot;Dissatisfied|Neither satisfied nor dissatisfied&quot; = &quot;$\\\\mu_2$&quot;, &quot;Neither satisfied nor dissatisfied|Satisfied&quot; = &quot;$\\\\mu_3$&quot;, &quot;Satisfied|Extremely satisfied&quot; = &quot;$\\\\mu_4$&quot;) # pscl::pR2()でMcFaddenの疑似R2を求める glance_custom.polr &lt;- function(x) { capture.output(McFadden &lt;- pR2(x)[&quot;McFadden&quot;]) # pR2のcat出力を抑制するためにcapture.output()で囲う out &lt;- tibble(&quot;pseudo.r.squared&quot; = McFadden) return(out) } gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;pseudo.r.squared&quot;, &quot;疑似$R^2$&quot;, 3, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) modelsummary(models_82, shape = term ~ group, coef_map = cm, gof_map = gm, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001)) .table td.tinytable_css_idtusv3skwlvircb0asq3q, .table th.tinytable_css_idtusv3skwlvircb0asq3q { text-align: center; text-align: left; } .table td.tinytable_css_idgeuukr9qknogy5yd6yvr, .table th.tinytable_css_idgeuukr9qknogy5yd6yvr { text-align: center; } .table td.tinytable_css_iduundp0n7hjhlgv9o2mjk, .table th.tinytable_css_iduundp0n7hjhlgv9o2mjk { text-align: center; border-bottom: solid 0.05em #d3d8dc; } .table td.tinytable_css_idnyyfqujf2i535hins22m, .table th.tinytable_css_idnyyfqujf2i535hins22m { text-align: left; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idxnn4lyjtbgcs1un74kjq, .table th.tinytable_css_idxnn4lyjtbgcs1un74kjq { text-align: center; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idhfv5gu0hbutog30ewiqp, .table th.tinytable_css_idhfv5gu0hbutog30ewiqp { text-align: left; } .table td.tinytable_css_id6nskz5gt189807e5vrq9, .table th.tinytable_css_id6nskz5gt189807e5vrq9 { border-bottom: solid 0.05em black; text-align: left; } .table td.tinytable_css_idthmbhvgscfg21wy0ncfd, .table th.tinytable_css_idthmbhvgscfg21wy0ncfd { border-bottom: solid 0.05em black; text-align: center; } 限界効果 (% ポイント変化) モデル係数 とても不満 不満 どちらでもない 満足 とても満足 * p 教育年数 0.030* -0.067* -0.472* -0.639* 0.710* 0.468* (0.012) (0.033) (0.189) (0.252) (0.281) (0.188) 年齢 0.007* -0.015 -0.106* -0.143* 0.159* 0.105* (0.003) (0.008) (0.048) (0.064) (0.071) (0.048) 配偶者あり -0.084 0.171 1.253 1.812 -1.868 -1.367 (0.151) (0.282) (2.150) (3.313) (3.162) (2.579) 子供数 -0.011 0.024 0.171 0.232 -0.258 -0.170 (0.040) (0.090) (0.626) (0.847) (0.942) (0.621) $\\mu_1$ -1.772*** (0.292) $\\mu_2$ -0.634* (0.274) $\\mu_3$ 0.414 (0.273) $\\mu_4$ 2.027*** (0.278) 疑似$R^2$ 0.004 サンプルサイズ 1225 限界効果で配偶者ありの値だけ少しStataと異なっている (カテゴリー変数の処理の仕方の差によるものか?). 実証例8.3 PIAACを用いた就業形態決定要因の分析 多項ロジットモデルは下ではnnet::multinom()を用いたが, 他にもmlogit::mlogit()などがある. # 女性に限定 piaac_female &lt;- piaac %&gt;% filter(gender == &quot;Female&quot;) %&gt;% mutate(empstat_edt = factor(empstat_edt, labels = c(&quot;フル&quot;, &quot;パート&quot;, &quot;不就業&quot;)) %&gt;% relevel(ref = 3)) # 先にベースラインを設定 model_83 &lt;- multinom(empstat_edt ~ educ + age + couple + child, data = piaac_female, trace = FALSE) model_83_marginal &lt;- avg_slopes(model_83, df = insight::get_df(model_83), type = &quot;probs&quot;) # pscl::pR2()でMcFaddenの疑似R2を求める glance_custom.multinom &lt;- function(x) { capture.output(McFadden &lt;- pR2(x)[&quot;McFadden&quot;]) # pR2のcat出力を抑制するためにcapture.output()で囲う out &lt;- tibble(&quot;pseudo.r.squared&quot; = McFadden) return(out) } # 係数が対応する目的変数を示す列名が元の多項ロジットモデルではresponse, 限界効果ではgroupと異なっているため, # 元のモデルを限界効果に合わせてgroupという列を追加 (逆ではなぜかmodelsummaryの出力がうまくいかなかった) model_83 &lt;- modelsummary(model_83, output = &quot;modelsummary_list&quot;) model_83$tidy &lt;- model_83$tidy %&gt;% mutate(group = response) models_83 &lt;- list(&quot; &quot; = model_83, &quot;限界効果&quot; = model_83_marginal) cm &lt;- c(&quot;educ&quot; = &quot;教育年数&quot;, &quot;age&quot; = &quot;年齢&quot;, &quot;couple&quot; = &quot;配偶者あり&quot;, &quot;child&quot; = &quot;子供数&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;pseudo.r.squared&quot;, &quot;疑似$R^2$&quot;, 3, &quot;nobs&quot;, &quot;サンプルサイズ&quot;, 0) modelsummary(models_83, shape = term ~ group, coef_map = cm, gof_map = gm, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001)) .table td.tinytable_css_idz69ei0opye0vp7dv50xa, .table th.tinytable_css_idz69ei0opye0vp7dv50xa { text-align: center; text-align: left; } .table td.tinytable_css_idyci1se3sgmd7bwu74i8h, .table th.tinytable_css_idyci1se3sgmd7bwu74i8h { text-align: center; } .table td.tinytable_css_idsc3yaal94lvmktjuq65m, .table th.tinytable_css_idsc3yaal94lvmktjuq65m { text-align: center; border-bottom: solid 0.05em #d3d8dc; } .table td.tinytable_css_idb69oajkfz9tre143k1sa, .table th.tinytable_css_idb69oajkfz9tre143k1sa { text-align: left; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idt0qku97zq3lrzqnmy7wd, .table th.tinytable_css_idt0qku97zq3lrzqnmy7wd { text-align: center; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idhl7vxj99zmvwpas2jwpb, .table th.tinytable_css_idhl7vxj99zmvwpas2jwpb { text-align: left; } .table td.tinytable_css_idz8pdttp0zxhtg9gdhddg, .table th.tinytable_css_idz8pdttp0zxhtg9gdhddg { border-bottom: solid 0.05em black; text-align: left; } .table td.tinytable_css_id0no3zt7pkvelctpyz4e6, .table th.tinytable_css_id0no3zt7pkvelctpyz4e6 { border-bottom: solid 0.05em black; text-align: center; } 限界効果 フル パート フル パート 不就業 * p 教育年数 0.186*** 0.003 0.036*** -0.017** -0.020*** (0.032) (0.030) (0.006) (0.006) (0.006) 年齢 0.008 0.007 0.001 0.001 -0.002 (0.006) (0.005) (0.001) (0.001) (0.001) 配偶者あり -0.898*** -0.541** -0.132*** -0.020 0.153*** (0.186) (0.183) (0.035) (0.034) (0.031) 子供数 0.085 0.084 0.009 0.011 -0.020 (0.067) (0.063) (0.011) (0.011) (0.013) 定数項 -2.489*** -0.208 (0.574) (0.529) 疑似$R^2$ 0.017 0.017 サンプルサイズ 1747 1747 限界効果の配偶者ありの標準誤差の値がやはりStataと異なっている. 実証例8.4 PIAACを用いた女性の労働時間決定の分析 トビットモデルはAER::tobit()を用いて推定できる. 被説明変数の下限・上限はそれぞれleft, rightパラメータで指定する. 擬似\\(R^2\\)は, AER::tobit()で推定したモデルにはpscl::pR2()が使えないため, 手動で計算する (参考). # 女性に限定 piaac_female &lt;- piaac %&gt;% filter(gender == &quot;Female&quot;) model_84_OLS &lt;- lm(hours ~ educ + age + couple + child, data = piaac_female, y = TRUE) model_84_tobit &lt;- tobit(hours ~ educ + age + couple + child, data = piaac_female, left = 0) models_84 &lt;- list(&quot;(1)&quot; = model_84_OLS, &quot;(2)&quot; = model_84_tobit) rows &lt;- tribble(~term, ~`(1)`, ~`(2)`, &quot;推定方法&quot;, &quot;OLS&quot;, &quot;トービット&quot;) attr(rows, &#39;position&#39;) &lt;- 1 cm &lt;- c(&quot;educ&quot; = &quot;教育年数&quot;, &quot;age&quot; = &quot;年齢&quot;, &quot;couple&quot; = &quot;配偶者あり&quot;, &quot;child&quot; = &quot;子供数&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;) glance_custom.tobit &lt;- function(x) { out &lt;- tibble(&quot;r.squared&quot; = 1 - x$loglik[2]/x$loglik[1], &quot;nobs_zero&quot; = sum(as.character(x$y) == &quot; 0-&quot;)) return(out) } glance_custom.lm &lt;- function(x) { out &lt;- tibble(&quot;nobs_zero&quot; = sum(x$y == 0)) return(out) } gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;r.squared&quot;, &quot;$R^2$/疑似$R^2$&quot;, 3, &quot;nobs&quot;, &quot;$N$&quot;, 0, &quot;nobs_zero&quot;, &quot;うち0時間&quot;, 0) modelsummary(models_84, coef_map = cm, gof_map = gm, add_rows = rows, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), ) .table td.tinytable_css_iddf3gr7bmcc850rm83hq8, .table th.tinytable_css_iddf3gr7bmcc850rm83hq8 { text-align: left; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_id8ttb3sfn2pd1l7r4n1y5, .table th.tinytable_css_id8ttb3sfn2pd1l7r4n1y5 { text-align: center; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idvw4bdk613lgr4zsjzv0u, .table th.tinytable_css_idvw4bdk613lgr4zsjzv0u { text-align: left; } .table td.tinytable_css_idrklzzllwi0fzjnlljpmv, .table th.tinytable_css_idrklzzllwi0fzjnlljpmv { text-align: center; } .table td.tinytable_css_idruohtqkgrpllwvn6k9bf, .table th.tinytable_css_idruohtqkgrpllwvn6k9bf { border-bottom: solid 0.05em black; text-align: left; } .table td.tinytable_css_id5fpr2346zx8itm7vws04, .table th.tinytable_css_id5fpr2346zx8itm7vws04 { border-bottom: solid 0.05em black; text-align: center; } (1) (2) * p 推定方法 OLS トービット 教育年数 0.853*** 1.291*** (0.232) (0.352) 年齢 0.046 0.094 (0.043) (0.067) 配偶者あり -6.808*** -9.432*** (1.343) (1.995) 子供数 0.673 0.996 (0.443) (0.669) 定数項 11.987** -0.269 (4.153) (6.317) $R^2$/疑似$R^2$ 0.022 0.003 $N$ 1736 1736 うち0時間 608 608 実証例8.5 PIAACを用いた女性賃金の決定要因の分析 先にデータを加工しておく. filter())で女性のみに限定し, drop_na()で指定した変数で欠損がある行を削除する. さらに, mutate()を用いて変数を作成する. ヘキットモデルの推定にはsampleSelection::heckit()を用いる. method引数で推定方法を指定でき, 2段階ヘキット法は\"2step\", 最尤法は\"ml\"とすればよい. piaac_female &lt;- piaac %&gt;% filter(gender == &quot;Female&quot;) %&gt;% drop_na(educ, age, couple, child) %&gt;% mutate(lwage = log(wage)) %&gt;% mutate(exp = age - educ - 6) %&gt;% mutate(exp2 = exp^2/100) %&gt;% mutate(selected = !is.na(wage)) model_85_OLS &lt;- lm(lwage ~ educ + exp + exp2, data = piaac_female) model_85_OLS &lt;- modelsummary(model_85_OLS, output = &quot;modelsummary_list&quot;) model_85_OLS$tidy$component = &quot;&quot; # modelsummaryのshapeで変形するために列を作成 model_85_2step &lt;- heckit(selected ~ educ + exp + exp2 + couple + child, lwage ~ educ + exp + exp2, data = piaac_female, method = &quot;2step&quot;) model_85_2step &lt;- modelsummary(model_85_2step, output = &quot;modelsummary_list&quot;) model_85_2step$tidy &lt;- model_85_2step$tidy %&gt;% mutate(component = ifelse(component == &quot;selection&quot;, &quot;セレクション式&quot;, &quot;賃金式&quot;)) # componentを日本語に直し, auxiliarlyは賃金式に統合 model_85_ml &lt;- heckit(selected ~ educ + exp + exp2 + couple + child, lwage ~ educ + exp + exp2, data = piaac_female, method = &quot;ml&quot;) model_85_ml &lt;- modelsummary(model_85_ml, output = &quot;modelsummary_list&quot;) model_85_ml$tidy &lt;- model_85_ml$tidy %&gt;% mutate(component = ifelse(component == &quot;selection&quot;, &quot;セレクション式&quot;, &quot;賃金式&quot;)) # componentを日本語に直し, auxiliarlyは賃金式に統合 models_85 &lt;- list(&quot;OLS&quot; = model_85_OLS, &quot;2段階ヘキット&quot; = model_85_2step, &quot;最尤法ヘキット&quot; = model_85_ml) cm &lt;- c(&quot;educ&quot; = &quot;教育年数&quot;, &quot;exp&quot; = &quot;経験年数&quot;, &quot;exp2&quot; = &quot;経験年数2乗/100&quot;, &quot;couple&quot; = &quot;配偶者あり&quot;, &quot;child&quot; = &quot;子供数&quot;, &quot;(Intercept)&quot; = &quot;定数項&quot;, &quot;invMillsRatio&quot; = &quot;逆ミルズ比&quot;, &quot;rho&quot; = &quot;誤差項の相関&quot;) gm &lt;- tribble(~raw, ~clean, ~fmt, &quot;adj.r.squared&quot;, &quot;$\\\\bar{R}^2$/疑似$R^2$&quot;, 2, &quot;nobs&quot;, &quot;$N$&quot;, 0) modelsummary(models_85, coef_map = cm, gof_map = gm, stars = c(&quot;*&quot; = 0.05, &quot;**&quot; = 0.01, &quot;***&quot; = 0.001), shape = term ~ component) .table td.tinytable_css_id21ivpn3w741gfpvvpg1n, .table th.tinytable_css_id21ivpn3w741gfpvvpg1n { text-align: center; text-align: left; } .table td.tinytable_css_id52mwl6ynugn3uzjm9qz1, .table th.tinytable_css_id52mwl6ynugn3uzjm9qz1 { text-align: center; } .table td.tinytable_css_idkun0hq4eyx5x5g5pit7x, .table th.tinytable_css_idkun0hq4eyx5x5g5pit7x { text-align: center; border-bottom: solid 0.05em #d3d8dc; } .table td.tinytable_css_ida9lzj9qi1j7chsyjdhs5, .table th.tinytable_css_ida9lzj9qi1j7chsyjdhs5 { text-align: left; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_iduhcqohmx2u7o3f8cjxxm, .table th.tinytable_css_iduhcqohmx2u7o3f8cjxxm { text-align: center; border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_idegfw3vljqk21xnnq9ufk, .table th.tinytable_css_idegfw3vljqk21xnnq9ufk { text-align: left; } .table td.tinytable_css_idxmexrt3a31g1qtfo6doo, .table th.tinytable_css_idxmexrt3a31g1qtfo6doo { border-bottom: solid 0.05em black; text-align: left; } .table td.tinytable_css_idi2d0s14lyy8cu4fgldpf, .table th.tinytable_css_idi2d0s14lyy8cu4fgldpf { border-bottom: solid 0.05em black; text-align: center; } 2段階ヘキット 最尤法ヘキット OLS セレクション式 賃金式 セレクション式 賃金式 * p 教育年数 0.086*** 0.003 0.086*** 0.003 0.086*** (0.013) (0.017) (0.013) (0.017) (0.013) 経験年数 0.007 0.133*** 0.009 0.133*** 0.010 (0.012) (0.014) (0.034) (0.014) (0.018) 経験年数2乗/100 -0.013 -0.239*** -0.017 -0.239*** -0.018 (0.021) (0.025) (0.061) (0.025) (0.031) 配偶者あり -0.288** -0.288** (0.094) (0.094) 子供数 0.001 0.002 (0.031) (0.031) 定数項 5.831*** -1.173*** 5.786*** -1.175*** 5.768*** (0.237) (0.299) (0.673) (0.299) (0.347) 逆ミルズ比 0.028 (0.390) 誤差項の相関 0.039 0.055 (0.220) $\\bar{R}^2$/疑似$R^2$ 0.05 0.05 $N$ 984 1747 1747 練習問題 8-4 [実証] 表8-1を参照せよ. 実証例8.5を参照せよ. "],["ch9.html", "第9章 政策評価モデル 図9-5 電子投票制度の導入が有効票率に与えた影響", " 第9章 政策評価モデル 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support09.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support09.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support09.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(haven) library(estimatr) 図9-5 電子投票制度の導入が有効票率に与えた影響 まずデータを読み込む. 次に1998年選挙で電子投票となった投票所であることを示すダミー変数treatと, 登録有権者数を4000人ごとのビンに分けた変数bin_voters96を作成し, そのビンごとに各選挙の有効票率の平均値を計算する. 次にggplot2でレジェンドが表示されるようにデータフレームをlong型に変換し, 散布図と回帰直線を描画する. munic &lt;- read_dta(&quot;data/09_第9章/Fujiwara2015/munic.dta&quot;) munic &lt;- munic%&gt;% # mutate(dep = voters96 - 40500) %&gt;% mutate(treat = voters96 &gt; 40500) %&gt;% # 一旦binに分けたあと, その範囲の中間値を代入 mutate(bin_voters96 = as.numeric(cut(voters96, breaks = seq(500, 200000, by = 4000))) * 4000 - 1500) munic &lt;- munic%&gt;% group_by(factor(bin_voters96)) %&gt;% mutate(bin_util94 = mean(r_util94, na.rm = TRUE)) %&gt;% mutate(bin_util98 = mean(r_util98, na.rm = TRUE)) %&gt;% mutate(bin_util02 = mean(r_util02, na.rm = TRUE)) munic &lt;- munic %&gt;% pivot_longer(cols = c(&quot;bin_util94&quot;, &quot;bin_util98&quot;, &quot;bin_util02&quot;)) %&gt;% mutate(name = factor(name, levels = c(&quot;bin_util94&quot;, &quot;bin_util98&quot;, &quot;bin_util02&quot;))) labels &lt;- c(bin_util94 = &quot;有効票/投票数 - 1994選挙 (紙のみ)&quot;, bin_util98 = &quot;有効票/投票数 - 1998 選挙 (4万人以上のみ電子投票)&quot;, bin_util02 = &quot;有効票/投票数 - 2002 選挙 (電子投票のみ)&quot;) # Stataに合わせてパレットの色を並べ替える palette &lt;- c(scales::hue_pal()(3)[2], scales::hue_pal()(3)[3], scales::hue_pal()(3)[1]) munic %&gt;% filter(4500 &lt; bin_voters96 &amp; bin_voters96 &lt; 100000) %&gt;% ggplot() + geom_point(aes(x = bin_voters96, y = value, color = name, shape = name)) + scale_color_manual(name = element_blank(), labels = labels, values = palette) + scale_shape(name = element_blank(), labels = labels) + scale_fill_manual(values = palette) + geom_smooth(data = munic %&gt;% filter(treat &amp; name == &quot;bin_util94&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[1]) + geom_smooth(data = munic %&gt;% filter(!treat &amp; name == &quot;bin_util94&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[1]) + geom_smooth(data = munic %&gt;% filter(treat &amp; name == &quot;bin_util98&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[2]) + geom_smooth(data = munic %&gt;% filter(!treat &amp; name == &quot;bin_util98&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[2]) + geom_smooth(data = munic %&gt;% filter(treat &amp; name == &quot;bin_util02&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[3]) + geom_smooth(data = munic %&gt;% filter(!treat &amp; name == &quot;bin_util02&quot;), aes(x = voters96, y = value), method = &quot;lm&quot;, formula = &quot;y ~ x + I(x^2)&quot;, se = FALSE, color = palette[3]) + geom_vline(xintercept = 40500) + xlab(&quot;登録有権者数 - 1996&quot;) + ylab(element_blank()) + labs(caption = &quot;(出所) Fujiwara (2015), Figure 2, p.435.&quot;) + theme(legend.position = &quot;bottom&quot;, legend.direction = &quot;vertical&quot;) + xlim(4500, 100000) 参考までに, 上のようなRDDプロットで変数が1つのみの場合, rdrobust::rdplot()を使うと簡単に描画できる. また, 変数が2種類の場合上に依存しているパッケージrdmultiを用いることができそうだ. "],["ch10.html", "第10章 系列相関と時系列モデル 図10-1 名目GDP 図10-2 GDPデフレーター 図10-3 名目系列と実質系列 図10-4 原系列と対数系列 図10-5 GDPギャップ (年次データ) 図10-6 実質GDP成長率 図10-7 実質GDP (公表季調値) 図10-8 季調済みGDPデフレーターのインフレ率 図10-9 消費者物価指数の (対数季節階差) インフレ率 図10-10 完全失業率 (移動平均) 図10-11 実験系列 図10-12 GDPギャップ (四半期データ) (10.12) 式 (10.13) 式 図10-14 GDPギャップのコレログラム 実証例10.1 GDPギャップの系列相関 実証例10.2 ホワイトノイズの系列相関 図10-15 実験系列 (ホワイトノイズ) のコレログラム 実証例10.3 フィリップス曲線の誤差項の系列相関 実証例10.4 フィリップス曲線のHAC標準誤差 実証例10.5 GDPギャップのARモデルのラグ選択 実証例10.6 ラグ付きインフレ率を含むフィリップス曲線の推定と誤差項の系列相関の検定 図10-16 東証株価指数 (対数階差収益率) 実証例10.7 ARCHモデルとGARCHモデルの推定 (10.69) 式 (10.70) 式 練習問題 10-10 [実証]", " 第10章 系列相関と時系列モデル 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support10.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support10.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support10.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } 必要なライブラリを読み込む. library(tidyverse) library(readxl) library(patchwork) ## ## Attaching package: &#39;patchwork&#39; ## The following object is masked from &#39;package:MASS&#39;: ## ## area library(estatapi) ## このサービスは、政府統計総合窓口(e-Stat)のAPI機能を使用していますが、サービスの内容は国によって保証されたものではありません。 library(tidyquant) ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo ## ── Attaching core tidyquant packages ───────────── tidyquant 1.0.10 ── ## ✔ PerformanceAnalytics 2.0.4 ✔ TTR 0.24.4 ## ✔ quantmod 0.4.26 ✔ xts 0.14.1 ## ── Conflicts ──────────────────────────────── tidyquant_conflicts() ── ## ✖ zoo::as.Date() masks base::as.Date() ## ✖ zoo::as.Date.numeric() masks base::as.Date.numeric() ## ✖ dplyr::filter() masks stats::filter() ## ✖ xts::first() masks dplyr::first() ## ✖ kableExtra::group_rows() masks dplyr::group_rows() ## ✖ dplyr::lag() masks stats::lag() ## ✖ xts::last() masks dplyr::last() ## ✖ PerformanceAnalytics::legend() masks graphics::legend() ## ✖ car::recode() masks dplyr::recode() ## ✖ MASS::select() masks dplyr::select() ## ✖ car::some() masks purrr::some() ## ✖ quantmod::summary() masks base::summary() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(estimatr) library(latex2exp) library(kableExtra) library(lmtest) library(sandwich) library(dynlm) library(fGarch) ## NOTE: Packages &#39;fBasics&#39;, &#39;timeDate&#39;, and &#39;timeSeries&#39; are no longer ## attached to the search() path when &#39;fGarch&#39; is attached. ## ## If needed attach them yourself in your R script by e.g., ## require(&quot;timeSeries&quot;) ## ## Attaching package: &#39;fGarch&#39; ## ## The following objects are masked from &#39;package:PerformanceAnalytics&#39;: ## ## ES, VaR ## ## The following object is masked from &#39;package:TTR&#39;: ## ## volatility library(momentfit) 図10-1 名目GDP Fig_1_nominalGDP_annual &lt;- read_excel(&quot;./data/10_第10章/Fig_1_nominalGDP_annual.xlsx&quot;) Fig_1_nominalGDP_annual %&gt;% ggplot(aes(x = ...1, y = 名目暦年)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;名目GDP (10億円)&quot;) 図10-2 GDPデフレーター Fig_2_GDPdeflator_annual &lt;- read_excel(&quot;./data/10_第10章/Fig_2_GDPdeflator_annual.xlsx&quot;) Fig_2_GDPdeflator_annual %&gt;% ggplot(aes(x = ...1, y = 暦年デフレーター)) + geom_line() + labs(x = &quot;年&quot;) 図10-3 名目系列と実質系列 図9-5で行ったように, 一旦データフレームをlong型に変換する. 軸の桁表示については(このブログ記事)[https://knknkn.hatenablog.com/entry/2020/04/11/160500]を参考にした. Fig_1_nominalGDP_annual %&gt;% pivot_longer(cols = c(&quot;名目暦年&quot;, &quot;実質暦年&quot;)) %&gt;% ggplot(aes(x = ...1, y = value, color = name)) + geom_line() + scale_color_hue(name = element_blank()) + labs(x = &quot;年&quot;, y = &quot;GDP (10億円)&quot;) + theme(legend.position = c(0, 1), legend.justification = c(0, 1)) + # 凡例を左上に表示 scale_y_continuous(labels = scales::label_number()) # y軸の数字をe+n表示にしない ## Warning: A numeric `legend.position` argument in `theme()` was deprecated in ## ggplot2 3.5.0. ## ℹ Please use the `legend.position.inside` argument of `theme()` ## instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning ## was generated. 図10-4 原系列と対数系列 別途内閣府のサイトからデータをダウンロードする. curl &lt;- &quot;https://www.esri.cao.go.jp/jp/sna/data/data_list/kakuhou/files/h10/tables/55fcm1r.xls&quot; cdestfile &lt;- &quot;downloads/55fcm1r.xls&quot; download.file(curl, cdestfile) ダウンロードしたxlsファイルをread_excel関数で読み込み, 必要な行列を抽出する. また, 行列変換してから再度データフレームにし, 変数を整理する. なお, 本文中にあるような左右で単位が異なる両軸プロットはggplot2では推奨されておらず, 非常に描画しづらい. 代わりにpatchworkパッケージを用いて2つのプロットを並べて表示する. fig10_4_data &lt;- read_excel(&quot;downloads/55fcm1r.xls&quot;, sheet = &quot;実数&quot;) fig10_4_data &lt;- t(fig10_4_data[c(6, 35), -1]) %&gt;% data.frame() %&gt;% mutate(year = as.integer(X1)) %&gt;% mutate(国内総支出 = as.numeric(X2)) %&gt;% dplyr::select(year, 国内総支出) p1 &lt;- fig10_4_data %&gt;% ggplot(aes(x = year, y = 国内総支出)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;国内総支出 (10億円)&quot;) p2 &lt;- fig10_4_data %&gt;% ggplot(aes(x = year, y = 国内総支出)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;対数国内総支出 (10億円)&quot;) + coord_trans(y = &quot;log&quot;) p1 + p2 図10-5 GDPギャップ (年次データ) 別途内閣府のサイトからデータをダウンロードする. データが更新されるごとにファイルのリンクが変わるようなので, 下が404エラーとなるときは, 内閣府のページの「ＧＤＰギャップ、潜在成長率」という名前のExcelファイルをダウンロードすればよい. curl &lt;- &quot;https://www5.cao.go.jp/keizai3/getsurei/2412rgap.xlsx&quot; cdestfile &lt;- &quot;downloads/2412gap.xlsx&quot; download.file(curl, cdestfile) ダウンロードしたExcelファイルを確認して, sheet, rows, colsを指定してデータを読み込む. fig10_5_data &lt;- read_excel(&quot;downloads/2412gap.xlsx&quot;, sheet = &quot;暦年&quot;) fig10_5_data[-(1:5), 1:2] %&gt;% rename(year = `2024年１－３月期四半期別ＧＤＰ速報（２次速報（改定値））`, GDP.Gap = 暦年) %&gt;% mutate(year = as.integer(year)) %&gt;% mutate(GDP.Gap = as.numeric(GDP.Gap)) %&gt;% ggplot(aes(x = year, y = GDP.Gap)) + geom_line() + labs(x = &quot;年&quot;, y = element_blank()) 図10-6 実質GDP成長率 図10-1で用いたデータを再利用し, 定義通りに成長率と対数階差成長率を求める. Fig_1_nominalGDP_annual &lt;- read_excel(&quot;./data/10_第10章/Fig_1_nominalGDP_annual.xlsx&quot;) Fig_1_nominalGDP_annual %&gt;% mutate(成長率 = 100 * (実質暦年 - lag(実質暦年))/lag(実質暦年)) %&gt;% mutate(対数階差成長率 = 100 * (log(実質暦年) - log(lag(実質暦年)))) %&gt;% pivot_longer(cols = c(&quot;成長率&quot;, &quot;対数階差成長率&quot;)) %&gt;% mutate(name = factor(name, levels = c(&quot;成長率&quot;, &quot;対数階差成長率&quot;))) %&gt;% ggplot(aes(x = ...1, y = value, color = name, linetype = name)) + geom_line() + scale_linetype_manual(values = c(&quot;dotted&quot;, &quot;solid&quot;)) + labs(x = &quot;年&quot;, y = element_blank()) ## Warning: Removed 2 rows containing missing values or values outside the scale ## range (`geom_line()`). 図10-7 実質GDP (公表季調値) こちらもやはりデータがサポートファイルに含まれていない. その代わりに, e-Statにあるデータを使うこととする. 事前にe-Statのウェブサイトに登録して, アプリケーションIDを取得し, e-stat_appId.txtに保存しておく. appId &lt;- scan(&quot;e-stat_appId.txt&quot;, what = &quot;character&quot;) e-Statから国内総生産の実質原系列と実質季節調整系列の2つをダウンロードする. 両者ともに年と四半期を示すtime_codeが用いられているので, これを使って2つを結合し, また表示の都合上日付形式に直す (関数convert_time_code). また, 実質季節調整系列は4で割って年換算に直す. # 実質原系列 real &lt;- estat_getStatsData(appId = appId, statsDataId = &quot;0003109766&quot;) ## Fetching record 1-3075... (total: 3075 records) real &lt;- real %&gt;% filter(国内総生産_実質原系列 == &quot;国内総生産(支出側)&quot;) # 実質季節調整系列 real_seasonal &lt;- estat_getStatsData(appId = appId, statsDataId = &quot;0003109750&quot;) ## Fetching record 1-3075... (total: 3075 records) real_seasonal &lt;- real_seasonal %&gt;% filter(国内総生産_実質季節調整系列 == &quot;国内総生産(支出側)&quot;) # ダウンロードしたデータの`time_code`列を`datetime`型に変換する. 便宜上各四半期初日の値を代入する. convert_time_code &lt;- function(x) { year &lt;- substr(x, 1, 4) month_day &lt;- case_when( substr(x, 7, 10) == &quot;0103&quot; ~ &quot;0101&quot;, substr(x, 7, 10) == &quot;0406&quot; ~ &quot;0401&quot;, substr(x, 7, 10) == &quot;0709&quot; ~ &quot;0701&quot;, TRUE ~ &quot;1001&quot; ) return(ymd(paste(year, month_day, sep = &quot;&quot;))) } inner_join(real, real_seasonal, by = &quot;time_code&quot;) %&gt;% mutate(date = convert_time_code(time_code)) %&gt;% mutate(value.y = value.y / 4) %&gt;% # 季節調整系列を年換算 pivot_longer(cols = c(&quot;value.x&quot;, &quot;value.y&quot;)) %&gt;% ggplot(aes(x = date, y = as.numeric(value), color = name)) + geom_line() + scale_color_hue(name = element_blank(), labels = c(&quot;現系列&quot;, &quot;季調値&quot;)) + labs(x = &quot;年&quot;, y = &quot;実質GDP (10億円)&quot;) + theme(legend.position = c(0, 1), legend.justification = c(0, 1)) # 凡例を左上に表示 図10-8 季調済みGDPデフレーターのインフレ率 別途内閣府のサイトと, e-Statからデータをダウンロードする. 内閣府のサイトからは1980年Q1から1995年Q1のデータを, e-Statからは1994年Q1以降のデータを取得する. # 内閣府のサイトから1980年以降のデータをダウンロード curl &lt;- &quot;https://www.esri.cao.go.jp/jp/sna/data/data_list/h27_retroactive/tables/def-qk_2780.csv&quot; cdestfile &lt;- &quot;downloads/def-qk_2780.csv&quot; download.file(curl, cdestfile) # ダウンロードしたデータを読み込み fig10_8_pre &lt;- read.csv(&quot;downloads/def-qk_2780.csv&quot;, fileEncoding = &quot;CP932&quot;) fig10_8_pre &lt;- fig10_8_pre[7:62, c(1, 2)] %&gt;% rename(`時間軸（四半期）` = 四半期デフレーター季節調整系列) %&gt;% rename(value = X) %&gt;% mutate(value = as.numeric(value)) # e-Statから1994年以降のデータをダウンロードして読み込み fig10_8_after &lt;- estat_getStatsData(appId = appId, statsDataId = &quot;0003109787&quot;) ## Fetching record 1-2214... (total: 2214 records) fig10_8_after &lt;- fig10_8_after %&gt;% filter(`国内総生産_四半期デフレーター 季節調整系列` == &quot;国内総生産(支出側)&quot;) %&gt;% dplyr::select(`時間軸（四半期）`, value) # 対応する時間軸を作成 year &lt;- seq(ymd(19800101), ymd(20240701), by = &quot;quarter&quot;) fig10_8_data &lt;- bind_rows(fig10_8_pre, fig10_8_after) %&gt;% cbind(year) %&gt;% data.frame() fig10_8_data &lt;- fig10_8_data %&gt;% mutate(inflation = 400 * (value - lag(value))/lag(value)) fig10_8_data %&gt;% ggplot(aes(x = year, y = inflation)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;インフレ率 (%)&quot;) ## Warning: Removed 1 row containing missing values or values outside the scale ## range (`geom_line()`). 図10-9 消費者物価指数の (対数季節階差) インフレ率 本文中の図では1980年1月から始まっているが, ここではデータがある1971年1月から始める. 対数季節階差の値もエクセルファイルにあるが, 確認のためRで計算し直す. Fig_9_CPEinflation_monthly &lt;- read_excel(&quot;./data/10_第10章/Fig_9_CPEinflation_monthly.xlsx&quot;) Fig_9_CPEinflation_monthly &lt;- Fig_9_CPEinflation_monthly %&gt;% mutate(year = ym(`類・品目`)) %&gt;% mutate(CPI = as.numeric(生鮮食品を除く総合)) %&gt;% mutate(対数季節階差 = 100 * log(CPI/lag(CPI, n = 12))) ## Warning: There was 1 warning in `mutate()`. ## ℹ In argument: `year = ym(`類・品目`)`. ## Caused by warning: ## ! 5 failed to parse. ## Warning: There was 1 warning in `mutate()`. ## ℹ In argument: `CPI = as.numeric(生鮮食品を除く総合)`. ## Caused by warning: ## ! NAs introduced by coercion Fig_9_CPEinflation_monthly %&gt;% filter(year &gt;= ym(197101)) %&gt;% ggplot(aes(x = year, y = 対数季節階差)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;インフレ率 (%)&quot;) 図10-10 完全失業率 (移動平均) 本文中の図では2000年から始まっているが, ここではデータがある1973年から始める. 移動平均は (エクセルファイルにも計算されているが) Rでggplotで描画するときに, tidyquant::geom_ma()を使うことができる. Fig_10_unemploymentrate_monthly &lt;- read_excel(&quot;./data/10_第10章/Fig_10_unemploymentrate_monthly.xlsx&quot;) Fig_10_unemploymentrate_monthly &lt;- Fig_10_unemploymentrate_monthly %&gt;% mutate(year = ym(...1)) %&gt;% mutate(完全失業率 = as.numeric(原系列)) Fig_10_unemploymentrate_monthly %&gt;% filter(year &gt;= ym(197207)) %&gt;% ggplot(aes(x = year, y = 完全失業率)) + geom_line(aes(color = &quot;原系列&quot;)) + labs(x = &quot;年&quot;, y = &quot;完全失業率 (%)&quot;) + geom_ma(n = 12, aes(color = &quot;移動平均&quot;)) + scale_color_hue(name = element_blank()) + labs(x = element_blank(), y = element_blank()) + theme(legend.position = c(0, 1), legend.justification = c(0, 1)) # 凡例を左上に表示 図10-11 実験系列 Excelファイルにデータが収録されているが, ここではRで乱数を同様に生成して描画する. # 再現性のために任意のシード値を設定 set.seed(634) # 150個の正規分布乱数を生成 (系列相関なし) fig10_11_a &lt;- rnorm(150) # 上で生成したデータをもとに正の系列相関を持つデータを生成 fig10_11_b &lt;- fig10_11_a[1] for(i in 2:150) { fig10_11_b[i] &lt;- fig10_11_b[i-1] + 0.5 * fig10_11_a[i] } data.frame(1:150, fig10_11_a, fig10_11_b) %&gt;% pivot_longer(cols = c(&quot;fig10_11_a&quot;, &quot;fig10_11_b&quot;)) %&gt;% ggplot(aes(x = X1.150, y = value, color = name)) + geom_line() + scale_color_hue(name = element_blank(), labels = c(&quot;(a) 系列相関なし&quot;, &quot;(b) 正の系列相関&quot;)) + labs(x = element_blank(), y = element_blank()) + theme(legend.position = c(0, 1), legend.justification = c(0, 1)) # 凡例を左上に表示 図10-12 GDPギャップ (四半期データ) Excelファイルには内閣府と日本銀行のデータが入っているが, 本文通り内閣府のデータを描画する. Fig_12_GDPgap_quarterly &lt;- read_excel(&quot;./data/10_第10章/Fig_12_GDPgap_quarterly.xlsx&quot;) Fig_12_GDPgap_quarterly &lt;- Fig_12_GDPgap_quarterly %&gt;% mutate(year = yq(...3)) %&gt;% mutate(GDP.Gap = as.numeric(内閣府)) Fig_12_GDPgap_quarterly %&gt;% ggplot(aes(x = year, y = GDP.Gap)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;GDPギャップ&quot;) (10.12) 式 data_exp10.12 &lt;- inner_join(fig10_8_data, Fig_12_GDPgap_quarterly) %&gt;% dplyr::select(year, inflation, 内閣府) %&gt;% filter(ym(198001) &lt;= year &amp; year &lt; ym(201701)) model10.12 &lt;- lm_robust(inflation ~ 内閣府, data = data_exp10.12, se_type = &quot;stata&quot;) summary(model10.12) ## ## Call: ## lm_robust(formula = inflation ~ 内閣府, data = data_exp10.12, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.5742 0.16705 3.438 7.660e-04 0.2441 0.9044 145 ## 内閣府 0.4153 0.09608 4.323 2.845e-05 0.2255 0.6052 145 ## ## Multiple R-squared: 0.09996 , Adjusted R-squared: 0.09375 ## F-statistic: 18.69 on 1 and 145 DF, p-value: 2.845e-05 (10.13) 式 data_exp10.13 &lt;- inner_join(Fig_9_CPEinflation_monthly, Fig_10_unemploymentrate_monthly, by = &quot;year&quot;) %&gt;% filter(year &gt;= ym(198001)) lm_robust(対数季節階差 ~ 完全失業率, data = data_exp10.13, se_type = &quot;stata&quot;) %&gt;% summary() ## ## Call: ## lm_robust(formula = 対数季節階差 ~ 完全失業率, data = data_exp10.13, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 5.203 0.25805 20.16 2.124e-64 4.696 5.710 437 ## 完全失業率 -1.195 0.06061 -19.72 2.305e-62 -1.314 -1.076 437 ## ## Multiple R-squared: 0.5251 , Adjusted R-squared: 0.524 ## F-statistic: 388.7 on 1 and 437 DF, p-value: &lt; 2.2e-16 図10-14 GDPギャップのコレログラム 標準のRではacf関数を使うと自己相関を求め, さらにコレログラムの描画もできる. ggplot2で描画するには, acf(plot = FALSE)としてacf関数ではグラフを描画せず, 計算結果をそのままggplot2に渡せばよい. fig10_14_data &lt;- Fig_12_GDPgap_quarterly %&gt;% filter(ym(198001) &lt; year &amp; year &lt; ym(201701)) %&gt;% dplyr::select(GDP.Gap) %&gt;% acf(plot = FALSE) ci &lt;- 0.95 N &lt;- fig10_14_data$n.used data.frame(acf = fig10_14_data$acf[-1], lag = fig10_14_data$lag[-1]) %&gt;% ggplot(aes(x = lag, y = acf)) + geom_bar(stat = &quot;identity&quot;, position = &quot;identity&quot;) + geom_hline(yintercept = qnorm((1+ci)/2)/sqrt(N), linetype = &quot;dashed&quot;) + geom_hline(yintercept = -qnorm((1+ci)/2)/sqrt(N), linetype = &quot;dashed&quot;) + labs(x = element_blank(), y = element_blank()) + annotate(&quot;text&quot;, x = 20, y = qnorm((1+ci)/2)/sqrt(N) + 0.02, label = TeX(&quot;$2 \\\\times $SE&quot;)) + annotate(&quot;text&quot;, x = 20, y = -qnorm((1+ci)/2)/sqrt(N) - 0.02, label = TeX(&quot;$-2 \\\\times $SE&quot;)) + annotate(&quot;text&quot;, x = 5, y = 0.6, label = &quot;自己相関&quot;) ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; 実証例10.1 GDPギャップの系列相関 リュン=ボックスの修正Q検定はBox.test(type = \"Ljung-Box\")で行うことができる. Kableでは行ごとに桁丸め処理を行うことが難しいため, ここではKableに渡す表の値を先に文字列形式にした. 一方似たような表作成パッケージであるgtでは行ごとの処理が可能ではあるが, 数式の表示が難しいという難点がある. 同様の表を複数作成するため, 関数としておく. data_ex10.1 &lt;- Fig_12_GDPgap_quarterly %&gt;% filter(ym(198001) &lt; year &amp; year &lt; ym(201701)) %&gt;% dplyr::select(GDP.Gap) serial_cor_table &lt;- function(data, digits = c(2, 1, 2, 2)) { rho &lt;- acf(data, plot = FALSE)$acf[-1] ms = c(1, 2, 3, 4, 8, 12, 16, 20) table &lt;- data.frame() round_format &lt;- function(x, digit = 2) { return(format(round(x, digit), nsmall = digit)) } for(i in ms){ test = Box.test(data, lag = i, type = &quot;Ljung-Box&quot;) # kableでは行ごとに桁丸めができないためここで丸めて文字列として保存する table &lt;- rbind(table, data.frame(m = as.character(i), rho_m = round_format(rho[i], digit = digits[1]), Q_LB = round_format(test$statistic, digit = digits[2]), 臨界値 = round_format(qchisq(0.95, df = i), digit = digits[3]), P値 = round_format(test$p.value, digit = digits[4]))) } table &lt;- t(table) rownames(table) &lt;- c(&quot;$m$&quot;, &quot;$\\\\hat{\\\\rho}_m$&quot;, &quot;$Q_{LB}$&quot;, &quot;臨界値&quot;, &quot;$P$値&quot;) table %&gt;% kable(col.names = NULL, row.names = TRUE, escape = FALSE, align = &quot;c&quot;) } serial_cor_table(data_ex10.1) \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) 0.84 0.67 0.51 0.36 0.02 -0.11 -0.15 -0.08 \\(Q_{LB}\\) 104.7 172.5 212.0 231.7 245.8 250.5 259.9 266.9 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 実証例10.2 ホワイトノイズの系列相関 図10-11で生成したデータを用いる. 表のフォーマットは実証例10.1と同様であるため, 上で作成した関数にデータを渡すだけでよい. serial_cor_table(fig10_11_a) \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) -0.08 -0.06 0.07 -0.07 0.07 -0.09 -0.03 0.04 \\(Q_{LB}\\) 1.0 1.6 2.5 3.1 6.1 12.8 14.6 15.9 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.31 0.44 0.48 0.53 0.63 0.38 0.56 0.72 図10-15 実験系列 (ホワイトノイズ) のコレログラム fig10_15_data &lt;- fig10_11_a %&gt;% acf(plot = FALSE) ci &lt;- 0.95 N &lt;- fig10_15_data$n.used data.frame(acf = fig10_15_data$acf[-1], lag = fig10_15_data$lag[-1]) %&gt;% ggplot(aes(x = lag, y = acf)) + geom_bar(stat = &quot;identity&quot;, position = &quot;identity&quot;) + geom_hline(yintercept = qnorm((1+ci)/2)/sqrt(N), linetype = &quot;dashed&quot;) + geom_hline(yintercept = -qnorm((1+ci)/2)/sqrt(N), linetype = &quot;dashed&quot;) + labs(x = element_blank(), y = element_blank()) + annotate(&quot;text&quot;, x = 20, y = qnorm((1+ci)/2)/sqrt(N) + 0.02, label = TeX(&quot;$2 \\\\times $SE&quot;)) + annotate(&quot;text&quot;, x = 20, y = -qnorm((1+ci)/2)/sqrt(N) - 0.02, label = TeX(&quot;$-2 \\\\times $SE&quot;)) + annotate(&quot;text&quot;, x = 5, y = 0.1, label = &quot;自己相関&quot;) ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; 実証例10.3 フィリップス曲線の誤差項の系列相関 (10.12)式のモデルの誤差項を調べる. インフレ率は内閣府から自身でダウンロードしたデータを用いているため値が異なる. # インフレ率の1行目はNAになっているので取り除く resid_10.3 &lt;- data_exp10.12$inflation[-1] - model10.12$fitted.values serial_cor_table(resid_10.3, digits = c(3, 2, 2, 2)) \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) 0.269 0.259 0.221 0.234 0.122 0.170 0.124 0.091 \\(Q_{LB}\\) 10.89 21.05 28.50 36.90 59.58 78.34 90.31 108.36 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 実証例10.4 フィリップス曲線のHAC標準誤差 HAC標準誤差は(10.12) 式で求めたモデルを一旦lm()で計算し直して, それをlmtest::coeftest()に渡すことで求められる. 下の通り, この方法でもStataと同じホワイト標準誤差 (HC1) を求めることができる. model10.12_lm &lt;- lm(inflation ~ 内閣府, data = data_exp10.12) # HAC標準誤差 coeftest(model10.12_lm, vcov = NeweyWest) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.57425 0.21694 2.6470 0.0090177 ** ## 内閣府 0.41535 0.11393 3.6457 0.0003709 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # ホワイト標準誤差 coeftest(model10.12_lm, vcov = vcovHC(model10.12_lm, type=&quot;HC1&quot;)) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.574248 0.167046 3.4377 0.000766 *** ## 内閣府 0.415346 0.096077 4.3231 2.845e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 実証例10.5 GDPギャップのARモデルのラグ選択 サポートサイトにあるEViewsの分析で用いているGDPギャップの出典が不明のため, 図10-12の作成に用いた内閣府のデータを用いる. RでARモデルを推定するには, ar()を用いれば適切なラグ次数\\(p\\)が自動で選択される. ここでは\\(p \\in \\{0, 1, 2, 3, 4\\}\\)についてAR(\\(p\\))モデルを比較検討したいので, arima(order = c(p, 0, 0))を用いる. また引数にinclude.mean = FALSEを指定することで定数項を含めないようにする. p.500にあるAICとBICの定義は本文中で説明されている通り簡易なものであり, 下では手動で計算した. ex10.5_data &lt;- Fig_12_GDPgap_quarterly %&gt;% filter(year &lt; ym(201701)) %&gt;% dplyr::select(内閣府) ex10.5_models &lt;- list(&quot;AR(0)&quot; = arima(ex10.5_data, order = c(0, 0, 0), include.mean = FALSE, method = &quot;ML&quot;), &quot;AR(1)&quot; = arima(ex10.5_data, order = c(1, 0, 0), include.mean = FALSE, method = &quot;ML&quot;), &quot;AR(2)&quot; = arima(ex10.5_data, order = c(2, 0, 0), include.mean = FALSE, method = &quot;ML&quot;), &quot;AR(3)&quot; = arima(ex10.5_data, order = c(3, 0, 0), include.mean = FALSE, method = &quot;ML&quot;), &quot;AR(4)&quot; = arima(ex10.5_data, order = c(4, 0, 0), include.mean = FALSE, method = &quot;ML&quot;)) ex10.5_table1 &lt;- data.frame() round_format &lt;- function(x, digits = 3) { return(format(round(x, digits), nsmall = digits)) } for(each in ex10.5_models) { p &lt;- each$arma[1] T &lt;- 148 - p RSS_p &lt;- sum(each$residuals^2) ln_RSS_p_div_T &lt;- log(RSS_p / T) AIC_penalty &lt;- (p + 1) * 2 / T BIC_penalty &lt;- (p + 1) * log(T) / T ex10.5_table1 &lt;- rbind(ex10.5_table1, data.frame(ps = as.character(p), AIC = round_format(ln_RSS_p_div_T + AIC_penalty), BIC = round_format(ln_RSS_p_div_T + BIC_penalty), RSS_p = round_format(RSS_p, 1), ln_RSS_p_div_T = round_format(ln_RSS_p_div_T), AIC_penalty = round_format(AIC_penalty), BIC_penalty = round_format(BIC_penalty))) } ex10.5_table1 &lt;- t(ex10.5_table1) rownames(ex10.5_table1) &lt;- c(&quot;$p$&quot;, &quot;AIC&quot;, &quot;BIC&quot;, &quot;RSS($p$)&quot;, &quot;ln[RSS($p$)/$T$]&quot;, &quot;AICの罰則項&quot;, &quot;BICの罰則項&quot;) ex10.5_table1 %&gt;% kable(col.names = NULL, row.names = TRUE, escape = FALSE, align = &quot;c&quot;) \\(p\\) 0 1 2 3 4 AIC 1.130 -0.224 -0.208 -0.191 -0.173 BIC 1.150 -0.183 -0.147 -0.109 -0.070 RSS(\\(p\\)) 452.1 114.4 113.8 113.4 113.0 ln[RSS(\\(p\\))/\\(T\\)] 1.117 -0.251 -0.250 -0.246 -0.242 AICの罰則項 0.014 0.027 0.041 0.055 0.069 BICの罰則項 0.034 0.068 0.102 0.137 0.173 # 定数項ありのAR(1)モデルを再推定 arima(x = ex10.5_data, order = c(1, 0, 0), method = &quot;ML&quot;) ## ## Call: ## arima(x = ex10.5_data, order = c(1, 0, 0), method = &quot;ML&quot;) ## ## Coefficients: ## ar1 intercept ## 0.8291 -0.7196 ## s.e. 0.0445 0.4065 ## ## sigma^2 estimated as 0.7605: log likelihood = -190.33, aic = 386.66 実証例10.6 ラグ付きインフレ率を含むフィリップス曲線の推定と誤差項の系列相関の検定 データは(10.12)式用に作成したものを再利用する. ADLモデルはRではdynlm::dynlm()を用いることで推定できるが, このとき関数に渡すデータは先にtsオブジェクトにしておく. 自由度修正ホワイト標準誤差は実証例10.4のように, 推定したモデルをcoeftestに渡せばよい. ここではボックス=ピアースによる近似を用いているが, これはBox.test(type = \"Box-Pierce\")と指定する. また, ブルイッシュ=ゴッドフレイ検定はlmtest::bgtest()を用いて実行できる. data_ex10.6 &lt;- data_exp10.12 %&gt;% dplyr::select(inflation, 内閣府) %&gt;% ts(start = c(1980, 1), end = c(2016, 4), frequency = 4) model_106 &lt;- dynlm(inflation ~ L(inflation) + L(inflation, 2) +L(inflation, 3) + L(inflation, 4) + 内閣府, data = data_ex10.6) summary(model_106) ## ## Time series regression with &quot;ts&quot; data: ## Start = 1981(2), End = 2016(4) ## ## Call: ## dynlm(formula = inflation ~ L(inflation) + L(inflation, 2) + ## L(inflation, 3) + L(inflation, 4) + 内閣府, data = data_ex10.6) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8113 -0.8859 -0.2014 0.6786 8.2331 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.20645 0.15348 1.345 0.18081 ## L(inflation) 0.10466 0.08187 1.278 0.20331 ## L(inflation, 2) 0.15685 0.08194 1.914 0.05767 . ## L(inflation, 3) 0.17570 0.07996 2.197 0.02968 * ## L(inflation, 4) 0.15139 0.07530 2.010 0.04636 * ## 内閣府 0.25363 0.08982 2.824 0.00546 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.595 on 137 degrees of freedom ## (1 observation deleted due to missingness) ## Multiple R-squared: 0.3247, Adjusted R-squared: 0.3001 ## F-statistic: 13.18 on 5 and 137 DF, p-value: 1.77e-10 # 自由度修正ホワイト標準誤差を求める coeftest(model_106, vcov = vcovHC(model_106, type=&quot;HC1&quot;)) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.206453 0.137560 1.5008 0.135704 ## L(inflation) 0.104657 0.076018 1.3767 0.170839 ## L(inflation, 2) 0.156853 0.067382 2.3278 0.021388 * ## L(inflation, 3) 0.175700 0.075959 2.3131 0.022207 * ## L(inflation, 4) 0.151385 0.070362 2.1515 0.033188 * ## 内閣府 0.253626 0.086136 2.9445 0.003802 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 rho &lt;- acf(model_106$residuals, plot = FALSE)$acf[-1] ms = c(1, 2, 3, 4, 8, 12, 16, 20) table &lt;- data.frame() round_format &lt;- function(x, digit = 2) { return(format(round(x, digit), nsmall = digit)) } for(i in ms){ bp_test = Box.test(model_106$residuals, lag = i, type = &quot;Box-Pierce&quot;) bg_test = bgtest(model_106, order = i, type = &quot;Chisq&quot;) # kableでは行ごとに桁丸めができないためここで丸めて文字列として保存する table &lt;- rbind(table, data.frame(m = as.character(i), rho_m = round_format(rho[i], digit = 2), Q_LB = round_format(bp_test$statistic, digit = 2), 臨界値 = round_format(qchisq(0.95, df = i - 4), digit = 2), P値 = round_format(bp_test$p.value, digit = 2), TMRsq = round_format(bg_test$statistic, digit = 2), 臨界値 = round_format(qchisq(0.95, df = i), digit = 2), P値 = round_format(bg_test$p.value, digit = 2))) } ## Warning in qchisq(0.95, df = i - 4): NaNs produced ## Warning in qchisq(0.95, df = i - 4): NaNs produced ## Warning in qchisq(0.95, df = i - 4): NaNs produced table &lt;- t(table) table[c(4, 5), 1:4] &lt;- &quot;-&quot; rownames(table) &lt;- c(&quot;$m$&quot;, &quot;$\\\\hat{\\\\rho}_m$&quot;, &quot;$Q_{LB}$&quot;, &quot;臨界値&quot;, &quot;$P$値&quot;, &quot;$(T - m) \\\\times R^2$&quot;, &quot;臨界値&quot;, &quot;$P$値&quot;) table %&gt;% kable(col.names = NULL, row.names = TRUE, escape = FALSE, align = &quot;c&quot;) \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) -0.07 -0.08 -0.06 -0.03 0.01 0.06 -0.01 -0.05 \\(Q_{LB}\\) 0.68 1.52 1.97 2.06 3.88 5.65 7.26 10.55 臨界値 - - - - 9.49 15.51 21.03 26.30 \\(P\\)値 - - - - 0.87 0.93 0.97 0.96 \\((T - m) \\times R^2\\) 10.64 13.41 14.14 14.32 20.79 23.51 25.48 26.15 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.00 0.00 0.00 0.01 0.01 0.02 0.06 0.16 図10-16 東証株価指数 (対数階差収益率) fig10_16_data &lt;- read_excel(&quot;./data/10_第10章/Fig_16_TOPIXreturn_thinner.xlsx&quot;) fig10_16_data %&gt;% ggplot(aes(x = Date, y = return_topix)) + geom_line() + labs(x = &quot;年&quot;, y = &quot;&quot;) ## Warning: Removed 1 row containing missing values or values outside the scale ## range (`geom_line()`). 実証例10.7 ARCHモデルとGARCHモデルの推定 ARCHモデルやGARCHモデルはfGarch::garchFit()を使うと容易に推定できる. ARCH(1)モデルはGARCH(1, 0)モデルに等しいことからそれぞれformula引数を適当に設定する. フィットしたgarchFitオブジェクトをsummary()関数にいれると, 下部でAICやBICといった情報基準も得ることができる. 本文中にある通り, AICとBICともにGARCH(1, 1)モデルのほうが値が小さく, こちらが選択されることが確認できた. data_ex10.7 &lt;- fig10_16_data %&gt;% mutate(res_sq = (return_topix - mean(return_topix, na.rm = TRUE))^2) # ARCH効果の検定 serial_cor_table(data_ex10.7$res_sq[-1], digits = c(2, 1, 2, 2)) # 1行目はNAなので除く \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) 0.28 0.34 0.33 0.20 0.18 0.23 0.12 0.08 \\(Q_{LB}\\) 337.7 809.1 1266.3 1428.2 2169.0 2887.6 3275.4 3451.8 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 # ARCH(1)モデル garchFit(~garch(1, 0), data = data_ex10.7$return_topix[-1], trace = FALSE) %&gt;% summary() ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~garch(1, 0), data = data_ex10.7$return_topix[-1], ## trace = FALSE) ## ## Mean and Variance Equation: ## data ~ garch(1, 0) ## &lt;environment: 0x5652e0e46278&gt; ## [data = data_ex10.7$return_topix[-1]] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 ## 0.011352 1.506653 0.237673 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.01135 0.02049 0.554 0.58 ## omega 1.50665 0.04270 35.285 &lt;2e-16 *** ## alpha1 0.23767 0.02357 10.084 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -7205.325 normalized: -1.727067 ## ## Description: ## Wed Feb 12 18:47:10 2025 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 2259.7339919 0.00000000 ## Shapiro-Wilk Test R W 0.9694867 0.00000000 ## Ljung-Box Test R Q(10) 17.2161210 0.06971648 ## Ljung-Box Test R Q(15) 23.9398460 0.06612207 ## Ljung-Box Test R Q(20) 29.2483546 0.08298312 ## Ljung-Box Test R^2 Q(10) 681.2169339 0.00000000 ## Ljung-Box Test R^2 Q(15) 839.5291185 0.00000000 ## Ljung-Box Test R^2 Q(20) 930.5696500 0.00000000 ## LM Arch Test R TR^2 433.8705114 0.00000000 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 3.455573 3.460129 3.455572 3.457185 # GARCH(1, 1)モデル garchFit(~garch(1, 1), data = data_ex10.7$return_topix[-1], trace = FALSE) %&gt;% summary() # FIXME: muの値が結構違う? ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~garch(1, 1), data = data_ex10.7$return_topix[-1], ## trace = FALSE) ## ## Mean and Variance Equation: ## data ~ garch(1, 1) ## &lt;environment: 0x5652e4401f68&gt; ## [data = data_ex10.7$return_topix[-1]] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## mu omega alpha1 beta1 ## 0.029496 0.054941 0.126192 0.849551 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## mu 0.02950 0.01748 1.688 0.0914 . ## omega 0.05494 0.01038 5.292 1.21e-07 *** ## alpha1 0.12619 0.01169 10.792 &lt; 2e-16 *** ## beta1 0.84955 0.01310 64.859 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -6898.781 normalized: -1.653591 ## ## Description: ## Wed Feb 12 18:47:11 2025 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 445.4347933 0.00000000 ## Shapiro-Wilk Test R W 0.9873895 0.00000000 ## Ljung-Box Test R Q(10) 20.4671734 0.02513111 ## Ljung-Box Test R Q(15) 26.0904479 0.03708267 ## Ljung-Box Test R Q(20) 29.6395101 0.07590927 ## Ljung-Box Test R^2 Q(10) 9.4888600 0.48642017 ## Ljung-Box Test R^2 Q(15) 12.3632777 0.65134964 ## Ljung-Box Test R^2 Q(20) 17.4056542 0.62649743 ## LM Arch Test R TR^2 11.4108285 0.49407682 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 3.309099 3.315174 3.309097 3.311248 (10.69) 式 データは実証例10.6で用いたものをそのまま使う. ただし, 上ではtsオブジェクトにしたのをdata.frameに戻す. ここには1980年～2016年の四半期ごとのインフレ率とGDPギャップのデータが含まれている. RでGMM推定をするには, momentfitパッケージを用いることができる. モーメント関数を指定して推定することもできるが, ここでは簡単に通常通りformulaをmomentModel()で指定し, そこでできたオブジェクトをgmmFit()関数に渡すことで推定結果が得られる. data_exp10.69 &lt;- data.frame(data_ex10.6) formula_exp10.69 &lt;- momentModel(inflation ~ lag(inflation) + lag(inflation, 2) + lag(inflation, 3) + lag(inflation, 4) + 内閣府, ~ lag(inflation) + lag(inflation, 2) + lag(inflation, 3) + lag(inflation, 4) + lag(inflation, 5) + lag(inflation, 6) + lag(inflation, 7) + lag(inflation, 8) + lag(内閣府) + lag(内閣府, 2) + lag(内閣府, 3) + lag(内閣府, 4) + lag(内閣府, 5) + lag(内閣府, 6) + lag(内閣府, 7) + lag(内閣府, 8), data = data_exp10.69, vcov = &quot;HAC&quot;) gmmFit(formula_exp10.69) %&gt;% summary() ## Model based on moment conditions ## ********************************* ## Moment type: linear ## Covariance matrix: HAC with Quadratic Spectral kernel and Andrews bandwidth ## Number of regressors: 6 ## Number of moment conditions: 17 ## Number of Endogenous Variables: 1 ## Sample size: 139 ## ## Estimation: Two-Step GMM ## Andrews Bandwidth: 1.142 ## Sandwich vcov: FALSE ## coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.284096 0.149427 1.9012 0.057270 . ## lag(inflation) 0.044989 0.052104 0.8634 0.387895 ## lag(inflation, 2) 0.127823 0.040041 3.1923 0.001412 ** ## lag(inflation, 3) 0.222487 0.056888 3.9109 9.194e-05 *** ## lag(inflation, 4) 0.144639 0.044854 3.2246 0.001261 ** ## 内閣府 0.455493 0.097660 4.6640 3.101e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## J-Test ## Statistics df pvalue ## Test E(g)=0: 6.2717 11 0.85464 ## ## ## Instrument strength based on the F-Statistics of the first stage OLS ## 内閣府 : F( 12 , 122 ) = 40.30642 (P-Vavue = 0 ) (10.70) 式 formula_exp10.70 &lt;- momentModel(inflation ~ lead(inflation) + 内閣府, ~ lag(inflation) + lag(inflation, 2) + lag(inflation, 3) + lag(inflation, 4) + lag(inflation, 5) + lag(inflation, 6) + lag(inflation, 7) + lag(inflation, 8) + lag(内閣府) + lag(内閣府, 2) + lag(内閣府, 3) + lag(内閣府, 4) + lag(内閣府, 5) + lag(内閣府, 6) + lag(内閣府, 7) + lag(内閣府, 8), data = data_exp10.69, vcov = &quot;HAC&quot;) gmmFit(formula_exp10.70) %&gt;% summary() ## Model based on moment conditions ## ********************************* ## Moment type: linear ## Covariance matrix: HAC with Quadratic Spectral kernel and Andrews bandwidth ## Number of regressors: 3 ## Number of moment conditions: 17 ## Number of Endogenous Variables: 2 ## Sample size: 138 ## ## Estimation: Two-Step GMM ## Andrews Bandwidth: 1.625 ## Sandwich vcov: FALSE ## coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.089382 0.136901 0.6529 0.5138 ## lead(inflation) 0.904841 0.110671 8.1760 2.935e-16 *** ## 内閣府 0.125576 0.109177 1.1502 0.2501 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## J-Test ## Statistics df pvalue ## Test E(g)=0: 18.267 14 0.1949 ## ## ## Instrument strength based on the F-Statistics of the first stage OLS ## lead(inflation) : F( 16 , 121 ) = 12.09591 (P-Vavue = 0 ) ## 内閣府 : F( 16 , 121 ) = 56.41916 (P-Vavue = 0 ) 練習問題 10-10 [実証] 1 - 3. 実証例10.7を参照せよ. 平均の代わりにAR(1)モデルを用いてGARCHモデルを推定するには, arma(1, 0)をformula引数に追加する (正しく推定できているかあまり自信がないです…). # AR(1)モデルを推定 practice10.10_ar1 &lt;- arima(data_ex10.7$return_topix[-1], order = c(1, 0, 0), include.mean = FALSE, method = &quot;ML&quot;) # 誤差項の2乗値について, ARCH効果の検定 serial_cor_table(practice10.10_ar1$residuals^2, digits = c(2, 1, 2, 2)) # 1行目はNAなので除く \\(m\\) 1 2 3 4 8 12 16 20 \\(\\hat{\\rho}_m\\) 0.28 0.34 0.33 0.20 0.19 0.23 0.12 0.08 \\(Q_{LB}\\) 338.2 814.7 1271.7 1432.3 2172.2 2883.9 3273.9 3451.5 臨界値 3.84 5.99 7.81 9.49 15.51 21.03 26.30 31.41 \\(P\\)値 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 # ARCH(1)モデル garchFit(~arma(1, 0) + garch(1, 0), data = data_ex10.7$return_topix[-1], include.mean = FALSE, trace = FALSE) %&gt;% summary() ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~arma(1, 0) + garch(1, 0), data = data_ex10.7$return_topix[-1], ## include.mean = FALSE, trace = FALSE) ## ## Mean and Variance Equation: ## data ~ arma(1, 0) + garch(1, 0) ## &lt;environment: 0x5652efba3c58&gt; ## [data = data_ex10.7$return_topix[-1]] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## ar1 omega alpha1 ## 0.065549 1.487455 0.249316 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## ar1 0.06555 0.02221 2.952 0.00316 ** ## omega 1.48745 0.04413 33.706 &lt; 2e-16 *** ## alpha1 0.24932 0.02600 9.591 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -7199.166 normalized: -1.725591 ## ## Description: ## Wed Feb 12 18:47:11 2025 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 2055.9401647 0.0000000 ## Shapiro-Wilk Test R W 0.9701342 0.0000000 ## Ljung-Box Test R Q(10) 14.9460857 0.1340399 ## Ljung-Box Test R Q(15) 21.0672902 0.1346931 ## Ljung-Box Test R Q(20) 25.9775431 0.1665548 ## Ljung-Box Test R^2 Q(10) 661.4492228 0.0000000 ## Ljung-Box Test R^2 Q(15) 830.3951664 0.0000000 ## Ljung-Box Test R^2 Q(20) 920.6342120 0.0000000 ## LM Arch Test R TR^2 427.1681942 0.0000000 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 3.452620 3.457177 3.452619 3.454232 # GARCH(1, 1)モデル garchFit(~arma(1, 0) + garch(1, 1), data = data_ex10.7$return_topix[-1], include.mean = FALSE, trace = FALSE) %&gt;% summary() ## ## Title: ## GARCH Modelling ## ## Call: ## garchFit(formula = ~arma(1, 0) + garch(1, 1), data = data_ex10.7$return_topix[-1], ## include.mean = FALSE, trace = FALSE) ## ## Mean and Variance Equation: ## data ~ arma(1, 0) + garch(1, 1) ## &lt;environment: 0x5652eddb1840&gt; ## [data = data_ex10.7$return_topix[-1]] ## ## Conditional Distribution: ## norm ## ## Coefficient(s): ## ar1 omega alpha1 beta1 ## 0.043979 0.054850 0.124020 0.851386 ## ## Std. Errors: ## based on Hessian ## ## Error Analysis: ## Estimate Std. Error t value Pr(&gt;|t|) ## ar1 0.04398 0.01671 2.631 0.00851 ** ## omega 0.05485 0.01033 5.309 1.1e-07 *** ## alpha1 0.12402 0.01151 10.779 &lt; 2e-16 *** ## beta1 0.85139 0.01295 65.720 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log Likelihood: ## -6896.307 normalized: -1.652998 ## ## Description: ## Wed Feb 12 18:47:11 2025 by user: ## ## ## Standardised Residuals Tests: ## Statistic p-Value ## Jarque-Bera Test R Chi^2 447.6576934 0.0000000 ## Shapiro-Wilk Test R W 0.9876457 0.0000000 ## Ljung-Box Test R Q(10) 7.8991992 0.6386824 ## Ljung-Box Test R Q(15) 13.2793885 0.5807278 ## Ljung-Box Test R Q(20) 16.9210259 0.6580957 ## Ljung-Box Test R^2 Q(10) 8.8533756 0.5460731 ## Ljung-Box Test R^2 Q(15) 12.2545227 0.6596704 ## Ljung-Box Test R^2 Q(20) 17.5635752 0.6161333 ## LM Arch Test R TR^2 11.8579164 0.4571571 ## ## Information Criterion Statistics: ## AIC BIC SIC HQIC ## 3.307913 3.313988 3.307911 3.310062 やはりARCH(1)モデルではなく, GARCH(1, 1)モデルが選択された. また, AR(1)モデルを取り入れたこちらのほうが僅かに情報量基準の値が小さいことがわかる. "],["ch11.html", "第11章 トレンドと構造変化", " 第11章 トレンドと構造変化 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support11.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support11.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support11.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } "],["ch12.html", "第12章 VARモデル", " 第12章 VARモデル 先に出版社サイトよりデータをダウンロードする. # サポートファイルへのリンク curl &lt;- &quot;https://www.yuhikaku.co.jp/static_files/05385_support12.zip&quot; # ダウンロード保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;downloads&quot;)){ dir.create(&quot;downloads&quot;) } cdestfile &lt;- &quot;downloads/support12.zip&quot; download.file(curl, cdestfile) # データ保存用フォルダが存在しない場合, 作成 if(!dir.exists(&quot;data&quot;)){ dir.create(&quot;data&quot;) } # WSL上のRで解凍すると文字化けするので、Linuxのコマンドを外部呼び出し # Windowsの場合は別途コマンドを用いる. if(.Platform$OS.type == &quot;unix&quot;) { system(sprintf(&#39;unzip -n -Ocp932 %s -d %s&#39;, &quot;downloads/support12.zip&quot;, &quot;./data&quot;)) } else { print(&quot;Windowsで解凍するコマンドを別途追加せよ.&quot;) } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
